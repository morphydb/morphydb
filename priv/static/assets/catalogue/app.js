(()=>{var Yt=Object.create;var We=Object.defineProperty;var Zt=Object.getOwnPropertyDescriptor;var Qt=Object.getOwnPropertyNames,ut=Object.getOwnPropertySymbols,ei=Object.getPrototypeOf,pt=Object.prototype.hasOwnProperty,ti=Object.prototype.propertyIsEnumerable;var ft=(e,t,i)=>t in e?We(e,t,{enumerable:!0,configurable:!0,writable:!0,value:i}):e[t]=i,ge=(e,t)=>{for(var i in t||(t={}))pt.call(t,i)&&ft(e,i,t[i]);if(ut)for(var i of ut(t))ti.call(t,i)&&ft(e,i,t[i]);return e};var ii=(e,t)=>()=>(t||e((t={exports:{}}).exports,t),t.exports);var ni=(e,t,i,n)=>{if(t&&typeof t=="object"||typeof t=="function")for(let s of Qt(t))!pt.call(e,s)&&s!==i&&We(e,s,{get:()=>t[s],enumerable:!(n=Zt(t,s))||n.enumerable});return e};var si=(e,t,i)=>(i=e!=null?Yt(ei(e)):{},ni(t||!e||!e.__esModule?We(i,"default",{value:e,enumerable:!0}):i,e));var Wt=ii((bn,Ue)=>{var nn=typeof window!="undefined"?window:typeof WorkerGlobalScope!="undefined"&&self instanceof WorkerGlobalScope?self:{},w=function(e){var t=/\blang(?:uage)?-([\w-]+)\b/i,i=0,n={},s={manual:e.Prism&&e.Prism.manual,disableWorkerMessageHandler:e.Prism&&e.Prism.disableWorkerMessageHandler,util:{encode:function d(u){return u instanceof r?new r(u.type,d(u.content),u.alias):Array.isArray(u)?u.map(d):u.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/\u00a0/g," ")},type:function(d){return Object.prototype.toString.call(d).slice(8,-1)},objId:function(d){return d.__id||Object.defineProperty(d,"__id",{value:++i}),d.__id},clone:function d(u,f){var b,y;switch(f=f||{},s.util.type(u)){case"Object":if(y=s.util.objId(u),f[y])return f[y];for(var A in b={},f[y]=b,u)u.hasOwnProperty(A)&&(b[A]=d(u[A],f));return b;case"Array":return y=s.util.objId(u),f[y]?f[y]:(b=[],f[y]=b,u.forEach(function(h,k){b[k]=d(h,f)}),b);default:return u}},getLanguage:function(d){for(;d&&!t.test(d.className);)d=d.parentElement;return d?(d.className.match(t)||[,"none"])[1].toLowerCase():"none"},currentScript:function(){if(typeof document=="undefined")return null;if("currentScript"in document)return document.currentScript;try{throw new Error}catch(b){var d=(/at [^(\r\n]*\((.*):.+:.+\)$/i.exec(b.stack)||[])[1];if(d){var u=document.getElementsByTagName("script");for(var f in u)if(u[f].src==d)return u[f]}return null}},isActive:function(d,u,f){for(var b="no-"+u;d;){var y=d.classList;if(y.contains(u))return!0;if(y.contains(b))return!1;d=d.parentElement}return!!f}},languages:{plain:n,plaintext:n,text:n,txt:n,extend:function(d,u){var f=s.util.clone(s.languages[d]);for(var b in u)f[b]=u[b];return f},insertBefore:function(d,u,f,b){var y=(b=b||s.languages)[d],A={};for(var h in y)if(y.hasOwnProperty(h)){if(h==u)for(var k in f)f.hasOwnProperty(k)&&(A[k]=f[k]);f.hasOwnProperty(h)||(A[h]=y[h])}var x=b[d];return b[d]=A,s.languages.DFS(s.languages,function(N,q){q===x&&N!=d&&(this[N]=A)}),A},DFS:function d(u,f,b,y){y=y||{};var A=s.util.objId;for(var h in u)if(u.hasOwnProperty(h)){f.call(u,h,u[h],b||h);var k=u[h],x=s.util.type(k);x!=="Object"||y[A(k)]?x!=="Array"||y[A(k)]||(y[A(k)]=!0,d(k,f,h,y)):(y[A(k)]=!0,d(k,f,null,y))}}},plugins:{},highlightAll:function(d,u){s.highlightAllUnder(document,d,u)},highlightAllUnder:function(d,u,f){var b={callback:f,container:d,selector:'code[class*="language-"], [class*="language-"] code, code[class*="lang-"], [class*="lang-"] code'};s.hooks.run("before-highlightall",b),b.elements=Array.prototype.slice.apply(b.container.querySelectorAll(b.selector)),s.hooks.run("before-all-elements-highlight",b);for(var y,A=0;y=b.elements[A++];)s.highlightElement(y,u===!0,b.callback)},highlightElement:function(d,u,f){var b=s.util.getLanguage(d),y=s.languages[b];d.className=d.className.replace(t,"").replace(/\s+/g," ")+" language-"+b;var A=d.parentElement;A&&A.nodeName.toLowerCase()==="pre"&&(A.className=A.className.replace(t,"").replace(/\s+/g," ")+" language-"+b);var h={element:d,language:b,grammar:y,code:d.textContent};function k(N){h.highlightedCode=N,s.hooks.run("before-insert",h),h.element.innerHTML=h.highlightedCode,s.hooks.run("after-highlight",h),s.hooks.run("complete",h),f&&f.call(h.element)}if(s.hooks.run("before-sanity-check",h),!h.code)return s.hooks.run("complete",h),void(f&&f.call(h.element));if(s.hooks.run("before-highlight",h),h.grammar)if(u&&e.Worker){var x=new Worker(s.filename);x.onmessage=function(N){k(N.data)},x.postMessage(JSON.stringify({language:h.language,code:h.code,immediateClose:!0}))}else k(s.highlight(h.code,h.grammar,h.language));else k(s.util.encode(h.code))},highlight:function(d,u,f){var b={code:d,grammar:u,language:f};return s.hooks.run("before-tokenize",b),b.tokens=s.tokenize(b.code,b.grammar),s.hooks.run("after-tokenize",b),r.stringify(s.util.encode(b.tokens),b.language)},tokenize:function(d,u){var f=u.rest;if(f){for(var b in f)u[b]=f[b];delete u.rest}var y=new o;return l(y,y.head,d),function A(h,k,x,N,q,M){for(var T in x)if(x.hasOwnProperty(T)&&x[T]){var R=x[T];R=Array.isArray(R)?R:[R];for(var I=0;I<R.length;++I){if(M&&M.cause==T+","+I)return;var L=R[I],D=L.inside,U=!!L.lookbehind,E=!!L.greedy,C=L.alias;if(E&&!L.pattern.global){var S=L.pattern.toString().match(/[imsuy]*$/)[0];L.pattern=RegExp(L.pattern.source,S+"g")}for(var _=L.pattern||L,P=N.next,O=q;P!==k.tail&&!(M&&O>=M.reach);O+=P.value.length,P=P.next){var B=P.value;if(k.length>h.length)return;if(!(B instanceof r)){var J,z=1;if(E){if(!(J=a(_,O,h,U)))break;var oe=J.index,ce=J.index+J[0].length,F=O;for(F+=P.value.length;F<=oe;)P=P.next,F+=P.value.length;if(F-=P.value.length,O=F,P.value instanceof r)continue;for(var te=P;te!==k.tail&&(F<ce||typeof te.value=="string");te=te.next)z++,F+=te.value.length;z--,B=h.slice(O,F),J.index-=O}else if(!(J=a(_,0,B,U)))continue;var oe=J.index,Te=J[0],Je=B.slice(0,oe),ct=B.slice(oe+Te.length),ze=O+B.length;M&&ze>M.reach&&(M.reach=ze);var xe=P.prev;Je&&(xe=l(k,xe,Je),O+=Je.length),c(k,xe,z);var Gt=new r(T,D?s.tokenize(Te,D):Te,C,Te);if(P=l(k,xe,Gt),ct&&l(k,P,ct),1<z){var Ve={cause:T+","+I,reach:ze};A(h,k,x,P.prev,O,Ve),M&&Ve.reach>M.reach&&(M.reach=Ve.reach)}}}}}}(d,y,u,y.head,0),function(A){for(var h=[],k=A.head.next;k!==A.tail;)h.push(k.value),k=k.next;return h}(y)},hooks:{all:{},add:function(d,u){var f=s.hooks.all;f[d]=f[d]||[],f[d].push(u)},run:function(d,u){var f=s.hooks.all[d];if(f&&f.length)for(var b,y=0;b=f[y++];)b(u)}},Token:r};function r(d,u,f,b){this.type=d,this.content=u,this.alias=f,this.length=0|(b||"").length}function a(d,u,f,b){d.lastIndex=u;var y=d.exec(f);if(y&&b&&y[1]){var A=y[1].length;y.index+=A,y[0]=y[0].slice(A)}return y}function o(){var d={value:null,prev:null,next:null},u={value:null,prev:d,next:null};d.next=u,this.head=d,this.tail=u,this.length=0}function l(d,u,f){var b=u.next,y={value:f,prev:u,next:b};return u.next=y,b.prev=y,d.length++,y}function c(d,u,f){for(var b=u.next,y=0;y<f&&b!==d.tail;y++)b=b.next;(u.next=b).prev=u,d.length-=y}if(e.Prism=s,r.stringify=function d(u,f){if(typeof u=="string")return u;if(Array.isArray(u)){var b="";return u.forEach(function(x){b+=d(x,f)}),b}var y={type:u.type,content:d(u.content,f),tag:"span",classes:["token",u.type],attributes:{},language:f},A=u.alias;A&&(Array.isArray(A)?Array.prototype.push.apply(y.classes,A):y.classes.push(A)),s.hooks.run("wrap",y);var h="";for(var k in y.attributes)h+=" "+k+'="'+(y.attributes[k]||"").replace(/"/g,"&quot;")+'"';return"<"+y.tag+' class="'+y.classes.join(" ")+'"'+h+">"+y.content+"</"+y.tag+">"},!e.document)return e.addEventListener&&(s.disableWorkerMessageHandler||e.addEventListener("message",function(d){var u=JSON.parse(d.data),f=u.language,b=u.code,y=u.immediateClose;e.postMessage(s.highlight(b,s.languages[f],f)),y&&e.close()},!1)),s;var p=s.util.currentScript();function v(){s.manual||s.highlightAll()}if(p&&(s.filename=p.src,p.hasAttribute("data-manual")&&(s.manual=!0)),!s.manual){var g=document.readyState;g==="loading"||g==="interactive"&&p&&p.defer?document.addEventListener("DOMContentLoaded",v):window.requestAnimationFrame?window.requestAnimationFrame(v):window.setTimeout(v,16)}return s}(nn);typeof Ue!="undefined"&&Ue.exports&&(Ue.exports=w),typeof global!="undefined"&&(global.Prism=w);w.languages.markup={comment:/<!--[\s\S]*?-->/,prolog:/<\?[\s\S]+?\?>/,doctype:{pattern:/<!DOCTYPE(?:[^>"'[\]]|"[^"]*"|'[^']*')+(?:\[(?:[^<"'\]]|"[^"]*"|'[^']*'|<(?!!--)|<!--(?:[^-]|-(?!->))*-->)*\]\s*)?>/i,greedy:!0,inside:{"internal-subset":{pattern:/(\[)[\s\S]+(?=\]>$)/,lookbehind:!0,greedy:!0,inside:null},string:{pattern:/"[^"]*"|'[^']*'/,greedy:!0},punctuation:/^<!|>$|[[\]]/,"doctype-tag":/^DOCTYPE/,name:/[^\s<>'"]+/}},cdata:/<!\[CDATA\[[\s\S]*?]]>/i,tag:{pattern:/<\/?(?!\d)[^\s>\/=$<%]+(?:\s(?:\s*[^\s>\/=]+(?:\s*=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+(?=[\s>]))|(?=[\s/>])))+)?\s*\/?>/,greedy:!0,inside:{tag:{pattern:/^<\/?[^\s>\/]+/,inside:{punctuation:/^<\/?/,namespace:/^[^\s>\/:]+:/}},"special-attr":[],"attr-value":{pattern:/=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+)/,inside:{punctuation:[{pattern:/^=/,alias:"attr-equals"},/"|'/]}},punctuation:/\/?>/,"attr-name":{pattern:/[^\s>\/]+/,inside:{namespace:/^[^\s>\/:]+:/}}}},entity:[{pattern:/&[\da-z]{1,8};/i,alias:"named-entity"},/&#x?[\da-f]{1,8};/i]},w.languages.markup.tag.inside["attr-value"].inside.entity=w.languages.markup.entity,w.languages.markup.doctype.inside["internal-subset"].inside=w.languages.markup,w.hooks.add("wrap",function(e){e.type==="entity"&&(e.attributes.title=e.content.replace(/&amp;/,"&"))}),Object.defineProperty(w.languages.markup.tag,"addInlined",{value:function(e,t){var i={};i["language-"+t]={pattern:/(^<!\[CDATA\[)[\s\S]+?(?=\]\]>$)/i,lookbehind:!0,inside:w.languages[t]},i.cdata=/^<!\[CDATA\[|\]\]>$/i;var n={"included-cdata":{pattern:/<!\[CDATA\[[\s\S]*?\]\]>/i,inside:i}};n["language-"+t]={pattern:/[\s\S]+/,inside:w.languages[t]};var s={};s[e]={pattern:RegExp("(<__[^>]*>)(?:<!\\[CDATA\\[(?:[^\\]]|\\](?!\\]>))*\\]\\]>|(?!<!\\[CDATA\\[)[^])*?(?=</__>)".replace(/__/g,function(){return e}),"i"),lookbehind:!0,greedy:!0,inside:n},w.languages.insertBefore("markup","cdata",s)}}),Object.defineProperty(w.languages.markup.tag,"addAttribute",{value:function(e,t){w.languages.markup.tag.inside["special-attr"].push({pattern:RegExp(`(^|["'\\s])(?:`+e+`)\\s*=\\s*(?:"[^"]*"|'[^']*'|[^\\s'">=]+(?=[\\s>]))`,"i"),lookbehind:!0,inside:{"attr-name":/^[^\s=]+/,"attr-value":{pattern:/=[\s\S]+/,inside:{value:{pattern:/(=\s*(["']|(?!["'])))\S[\s\S]*(?=\2$)/,lookbehind:!0,alias:[t,"language-"+t],inside:w.languages[t]},punctuation:[{pattern:/^=/,alias:"attr-equals"},/"|'/]}}}})}}),w.languages.html=w.languages.markup,w.languages.mathml=w.languages.markup,w.languages.svg=w.languages.markup,w.languages.xml=w.languages.extend("markup",{}),w.languages.ssml=w.languages.xml,w.languages.atom=w.languages.xml,w.languages.rss=w.languages.xml;(function(e){var t=/("|')(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/;e.languages.css={comment:/\/\*[\s\S]*?\*\//,atrule:{pattern:/@[\w-](?:[^;{\s]|\s+(?![\s{]))*(?:;|(?=\s*\{))/,inside:{rule:/^@[\w-]+/,"selector-function-argument":{pattern:/(\bselector\s*\(\s*(?![\s)]))(?:[^()\s]|\s+(?![\s)])|\((?:[^()]|\([^()]*\))*\))+(?=\s*\))/,lookbehind:!0,alias:"selector"},keyword:{pattern:/(^|[^\w-])(?:and|not|only|or)(?![\w-])/,lookbehind:!0}}},url:{pattern:RegExp("\\burl\\((?:"+t.source+`|(?:[^\\\\\r
()"']|\\\\[^])*)\\)`,"i"),greedy:!0,inside:{function:/^url/i,punctuation:/^\(|\)$/,string:{pattern:RegExp("^"+t.source+"$"),alias:"url"}}},selector:RegExp(`[^{}\\s](?:[^{};"'\\s]|\\s+(?![\\s{])|`+t.source+")*(?=\\s*\\{)"),string:{pattern:t,greedy:!0},property:/(?!\s)[-_a-z\xA0-\uFFFF](?:(?!\s)[-\w\xA0-\uFFFF])*(?=\s*:)/i,important:/!important\b/i,function:/[-a-z0-9]+(?=\()/i,punctuation:/[(){};:,]/},e.languages.css.atrule.inside.rest=e.languages.css;var i=e.languages.markup;i&&(i.tag.addInlined("style","css"),i.tag.addAttribute("style","css"))})(w);w.languages.clike={comment:[{pattern:/(^|[^\\])\/\*[\s\S]*?(?:\*\/|$)/,lookbehind:!0,greedy:!0},{pattern:/(^|[^\\:])\/\/.*/,lookbehind:!0,greedy:!0}],string:{pattern:/(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,greedy:!0},"class-name":{pattern:/(\b(?:class|interface|extends|implements|trait|instanceof|new)\s+|\bcatch\s+\()[\w.\\]+/i,lookbehind:!0,inside:{punctuation:/[.\\]/}},keyword:/\b(?:if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\b/,boolean:/\b(?:true|false)\b/,function:/\w+(?=\()/,number:/\b0x[\da-f]+\b|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:e[+-]?\d+)?/i,operator:/[<>]=?|[!=]=?=?|--?|\+\+?|&&?|\|\|?|[?*/~^%]/,punctuation:/[{}[\];(),.:]/};w.languages.javascript=w.languages.extend("clike",{"class-name":[w.languages.clike["class-name"],{pattern:/(^|[^$\w\xA0-\uFFFF])(?!\s)[_$A-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\.(?:prototype|constructor))/,lookbehind:!0}],keyword:[{pattern:/((?:^|})\s*)catch\b/,lookbehind:!0},{pattern:/(^|[^.]|\.\.\.\s*)\b(?:as|async(?=\s*(?:function\b|\(|[$\w\xA0-\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally(?=\s*(?:\{|$))|for|from(?=\s*(?:['"]|$))|function|(?:get|set)(?=\s*(?:[\[$\w\xA0-\uFFFF]|$))|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\b/,lookbehind:!0}],function:/#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*(?:\.\s*(?:apply|bind|call)\s*)?\()/,number:/\b(?:(?:0[xX](?:[\dA-Fa-f](?:_[\dA-Fa-f])?)+|0[bB](?:[01](?:_[01])?)+|0[oO](?:[0-7](?:_[0-7])?)+)n?|(?:\d(?:_\d)?)+n|NaN|Infinity)\b|(?:\b(?:\d(?:_\d)?)+\.?(?:\d(?:_\d)?)*|\B\.(?:\d(?:_\d)?)+)(?:[Ee][+-]?(?:\d(?:_\d)?)+)?/,operator:/--|\+\+|\*\*=?|=>|&&=?|\|\|=?|[!=]==|<<=?|>>>?=?|[-+*/%&|^!=<>]=?|\.{3}|\?\?=?|\?\.?|[~:]/}),w.languages.javascript["class-name"][0].pattern=/(\b(?:class|interface|extends|implements|instanceof|new)\s+)[\w.\\]+/,w.languages.insertBefore("javascript","keyword",{regex:{pattern:/((?:^|[^$\w\xA0-\uFFFF."'\])\s]|\b(?:return|yield))\s*)\/(?:\[(?:[^\]\\\r\n]|\\.)*]|\\.|[^/\\\[\r\n])+\/[gimyus]{0,6}(?=(?:\s|\/\*(?:[^*]|\*(?!\/))*\*\/)*(?:$|[\r\n,.;:})\]]|\/\/))/,lookbehind:!0,greedy:!0,inside:{"regex-source":{pattern:/^(\/)[\s\S]+(?=\/[a-z]*$)/,lookbehind:!0,alias:"language-regex",inside:w.languages.regex},"regex-flags":/[a-z]+$/,"regex-delimiter":/^\/|\/$/}},"function-variable":{pattern:/#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*[=:]\s*(?:async\s*)?(?:\bfunction\b|(?:\((?:[^()]|\([^()]*\))*\)|(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*)\s*=>))/,alias:"function"},parameter:[{pattern:/(function(?:\s+(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*)?\s*\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\))/,lookbehind:!0,inside:w.languages.javascript},{pattern:/(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*=>)/i,inside:w.languages.javascript},{pattern:/(\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\)\s*=>)/,lookbehind:!0,inside:w.languages.javascript},{pattern:/((?:\b|\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\w\xA0-\uFFFF]))(?:(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*\s*)\(\s*|\]\s*\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\)\s*\{)/,lookbehind:!0,inside:w.languages.javascript}],constant:/\b[A-Z](?:[A-Z_]|\dx?)*\b/}),w.languages.insertBefore("javascript","string",{"template-string":{pattern:/`(?:\\[\s\S]|\${(?:[^{}]|{(?:[^{}]|{[^}]*})*})+}|(?!\${)[^\\`])*`/,greedy:!0,inside:{"template-punctuation":{pattern:/^`|`$/,alias:"string"},interpolation:{pattern:/((?:^|[^\\])(?:\\{2})*)\${(?:[^{}]|{(?:[^{}]|{[^}]*})*})+}/,lookbehind:!0,inside:{"interpolation-punctuation":{pattern:/^\${|}$/,alias:"punctuation"},rest:w.languages.javascript}},string:/[\s\S]+/}}}),w.languages.markup&&(w.languages.markup.tag.addInlined("script","javascript"),w.languages.markup.tag.addAttribute("on(?:abort|blur|change|click|composition(?:end|start|update)|dblclick|error|focus(?:in|out)?|key(?:down|up)|load|mouse(?:down|enter|leave|move|out|over|up)|reset|resize|scroll|select|slotchange|submit|unload|wheel)","javascript")),w.languages.js=w.languages.javascript;w.languages.elixir={doc:{pattern:/@(?:doc|moduledoc)\s+(?:("""|''')[\s\S]*?\1|("|')(?:\\(?:\r\n|[\s\S])|(?!\2)[^\\\r\n])*\2)/,inside:{attribute:/^@\w+/,string:/['"][\s\S]+/}},comment:{pattern:/#.*/m,greedy:!0},regex:{pattern:/~[rR](?:("""|''')(?:\\[\s\S]|(?!\1)[^\\])+\1|([\/|"'])(?:\\.|(?!\2)[^\\\r\n])+\2|\((?:\\.|[^\\)\r\n])+\)|\[(?:\\.|[^\\\]\r\n])+\]|\{(?:\\.|[^\\}\r\n])+\}|<(?:\\.|[^\\>\r\n])+>)[uismxfr]*/,greedy:!0},string:[{pattern:/~[cCsSwW](?:("""|''')(?:\\[\s\S]|(?!\1)[^\\])+\1|([\/|"'])(?:\\.|(?!\2)[^\\\r\n])+\2|\((?:\\.|[^\\)\r\n])+\)|\[(?:\\.|[^\\\]\r\n])+\]|\{(?:\\.|#\{[^}]+\}|#(?!\{)|[^#\\}\r\n])+\}|<(?:\\.|[^\\>\r\n])+>)[csa]?/,greedy:!0,inside:{}},{pattern:/("""|''')[\s\S]*?\1/,greedy:!0,inside:{}},{pattern:/("|')(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,greedy:!0,inside:{}}],atom:{pattern:/(^|[^:]):\w+/,lookbehind:!0,alias:"symbol"},module:{pattern:/\b[A-Z]\w*\b/,alias:"class-name"},"attr-name":/\w+\??:(?!:)/,argument:{pattern:/(^|[^&])&\d+/,lookbehind:!0,alias:"variable"},attribute:{pattern:/@\w+/,alias:"variable"},function:/\b[_a-zA-Z]\w*[?!]?(?:(?=\s*(?:\.\s*)?\()|(?=\/\d+))/,number:/\b(?:0[box][a-f\d_]+|\d[\d_]*)(?:\.[\d_]+)?(?:e[+-]?[\d_]+)?\b/i,keyword:/\b(?:after|alias|and|case|catch|cond|def(?:callback|exception|impl|module|p|protocol|struct|delegate)?|do|else|end|fn|for|if|import|not|or|raise|require|rescue|try|unless|use|when)\b/,boolean:/\b(?:true|false|nil)\b/,operator:[/\bin\b|&&?|\|[|>]?|\\\\|::|\.\.\.?|\+\+?|-[->]?|<[-=>]|>=|!==?|\B!|=(?:==?|[>~])?|[*\/^]/,{pattern:/([^<])<(?!<)/,lookbehind:!0},{pattern:/([^>])>(?!>)/,lookbehind:!0}],punctuation:/<<|>>|[.,%\[\]{}()]/},w.languages.elixir.string.forEach(function(e){e.inside={interpolation:{pattern:/#\{[^}]+\}/,inside:{delimiter:{pattern:/^#\{|\}$/,alias:"punctuation"},rest:w.languages.elixir}}}});(function(e){var t=e.util.clone(e.languages.elixir),i="(?:\\{<S>*\\.{3}(?:[^{}]|<BRACES>)*\\})";function n(a,o){return a=a.replace(/<S>/g,function(){return"(?:\\s|//.*(?!.)|/\\*(?:[^*]|\\*(?!/))\\*/)"}).replace(/<BRACES>/g,function(){return"(?:\\{(?:\\{(?:\\{[^{}]*\\}|[^{}])*\\}|[^{}])*\\})"}).replace(/<SPREAD>/g,function(){return i}),RegExp(a,o)}i=n(i).source,e.languages.surface=e.languages.extend("markup",t),e.languages.surface.tag.pattern=n(`</?(?:[\\w.:-]+(?:<S>+(?:[\\w.:$-]+(?:=(?:"(?:\\\\[^]|[^\\\\"])*"|'(?:\\\\[^]|[^\\\\'])*'|[^\\s{'"/>=]+|<BRACES>))?|<SPREAD>))*<S>*/?)?>`),e.languages.surface.tag.inside.tag.pattern=/^<\/?[^\s>\/]*/i,e.languages.surface.tag.inside["attr-value"].pattern=/=(?!\{)(?:"(?:\\[^]|[^\\"])*"|'(?:\\[^]|[^\\'])*'|[^\s'">]+)/i,e.languages.surface.tag.inside.tag.inside["class-name"]=/^[A-Z]\w*(?:\.[A-Z]\w*)*$/,e.languages.surface.tag.inside.tag.inside["tag-name"]=/^[a-z]\w*(?:\.[a-z]\w*)*$/,e.languages.surface.tag.inside.comment=t.comment,e.languages.insertBefore("inside","attr-name",{spread:{pattern:n("<SPREAD>"),inside:e.languages.surface}},e.languages.surface.tag),e.languages.insertBefore("inside","special-attr",{script:{pattern:n("=<BRACES>"),inside:{"script-punctuation":{pattern:/^=(?={)/,alias:"punctuation"},rest:e.languages.surface},alias:"language-elixir"}},e.languages.surface.tag),e.languages.insertBefore("elixir","atom",{"embedded-surface":{pattern:/~H(""")[\s\S]*?\1/,greedy:!0,inside:{"embedded-surface-open":{pattern:/^~H"""/,alias:"punctuation"},"embedded-surface-close":{pattern:/"""$/,alias:"punctuation"},surface:{pattern:/[\s\S]+/,inside:e.languages.surface}}},"surface-api":{pattern:/^\s+\b(?:prop|data|slot)\b\s+/,alias:"class-name"}});var s=function(a){return a?typeof a=="string"?a:typeof a.content=="string"?a.content:a.content.map(s).join(""):""},r=function(a,o){o==="surface"&&a.unshift(new e.Token("tag",[new e.Token("tag",[new e.Token("punctuation","<")]),new e.Token("punctuation",">")]));for(var l=[],c=0;c<a.length;c++){var p=a[c],v=!1;if(typeof p!="string"&&(p.type==="tag"&&p.content[0]&&p.content[0].type==="tag"?p.content[0].content[0].content==="</"?0<l.length&&l[l.length-1].tagName===s(p.content[0].content[1])&&l.pop():p.content[p.content.length-1].content==="/>"||l.push({tagName:s(p.content[0].content[1]),openedBraces:0}):0<l.length&&p.type==="punctuation"&&p.content==="{"?l[l.length-1].openedBraces++:0<l.length&&0<l[l.length-1].openedBraces&&p.type==="punctuation"&&p.content==="}"?l[l.length-1].openedBraces--:v=!0),(v||typeof p=="string")&&0<l.length&&l[l.length-1].openedBraces===0){var g=s(p);c<a.length-1&&(typeof a[c+1]=="string"||a[c+1].type==="plain-text")&&(g+=s(a[c+1]),a.splice(c+1,1)),0<c&&(typeof a[c-1]=="string"||a[c-1].type==="plain-text")&&(g=s(a[c-1])+g,a.splice(c-1,1),c--),a[c]=new e.Token("plain-text",g,null,g)}p.content&&typeof p.content!="string"&&r(p.content,p.type)}o==="surface"&&a.shift()};e.hooks.add("after-tokenize",function(a){a.language!=="surface"&&a.language!=="elixir"||r(a.tokens,a.language)})})(w);(function(){if(typeof self!="undefined"&&self.Prism&&self.document&&document.querySelector){var e,t="line-numbers",i="linkable-line-numbers",n=function(){if(e===void 0){var g=document.createElement("div");g.style.fontSize="13px",g.style.lineHeight="1.5",g.style.padding="0",g.style.border="0",g.innerHTML="&nbsp;<br />&nbsp;",document.body.appendChild(g),e=g.offsetHeight===38,document.body.removeChild(g)}return e},s=!0,r=0;w.hooks.add("before-sanity-check",function(g){var d=g.element.parentElement;if(c(d)){var u=0;a(".line-highlight",d).forEach(function(f){u+=f.textContent.length,f.parentNode.removeChild(f)}),u&&/^( \n)+$/.test(g.code.slice(-u))&&(g.code=g.code.slice(0,-u))}}),w.hooks.add("complete",function g(d){var u=d.element.parentElement;if(c(u)){clearTimeout(r);var f=w.plugins.lineNumbers,b=d.plugins&&d.plugins.lineNumbers;o(u,t)&&f&&!b?w.hooks.add("line-numbers",g):(p(u)(),r=setTimeout(v,1))}}),window.addEventListener("hashchange",v),window.addEventListener("resize",function(){a("pre").filter(c).map(function(g){return p(g)}).forEach(l)})}function a(g,d){return Array.prototype.slice.call((d||document).querySelectorAll(g))}function o(g,d){return g.classList.contains(d)}function l(g){g()}function c(g){return!(!g||!/pre/i.test(g.nodeName))&&(!!g.hasAttribute("data-line")||!(!g.id||!w.util.isActive(g,i)))}function p(g,d,u){var f=(d=typeof d=="string"?d:g.getAttribute("data-line")||"").replace(/\s+/g,"").split(",").filter(Boolean),b=+g.getAttribute("data-line-offset")||0,y=(n()?parseInt:parseFloat)(getComputedStyle(g).lineHeight),A=w.util.isActive(g,t),h=g.querySelector("code"),k=A?g:h||g,x=[],N=h&&k!=h?function(T,R){var I=getComputedStyle(T),L=getComputedStyle(R);function D(U){return+U.substr(0,U.length-2)}return R.offsetTop+D(L.borderTopWidth)+D(L.paddingTop)-D(I.paddingTop)}(g,h):0;f.forEach(function(T){var R=T.split("-"),I=+R[0],L=+R[1]||I,D=g.querySelector('.line-highlight[data-range="'+T+'"]')||document.createElement("div");if(x.push(function(){D.setAttribute("aria-hidden","true"),D.setAttribute("data-range",T),D.className=(u||"")+" line-highlight"}),A&&w.plugins.lineNumbers){var U=w.plugins.lineNumbers.getLine(g,I),E=w.plugins.lineNumbers.getLine(g,L);if(U){var C=U.offsetTop+N+"px";x.push(function(){D.style.top=C})}if(E){var S=E.offsetTop-U.offsetTop+E.offsetHeight+"px";x.push(function(){D.style.height=S})}}else x.push(function(){D.setAttribute("data-start",String(I)),I<L&&D.setAttribute("data-end",String(L)),D.style.top=(I-b-1)*y+N+"px",D.textContent=new Array(L-I+2).join(` 
`)});x.push(function(){k.appendChild(D)})});var q=g.id;if(A&&w.util.isActive(g,i)&&q){o(g,i)||x.push(function(){g.classList.add(i)});var M=parseInt(g.getAttribute("data-start")||"1");a(".line-numbers-rows > span",g).forEach(function(T,R){var I=R+M;T.onclick=function(){var L=q+"."+I;s=!1,location.hash=L,setTimeout(function(){s=!0},1)}})}return function(){x.forEach(l)}}function v(){var g=location.hash.slice(1);a(".temporary.line-highlight").forEach(function(b){b.parentNode.removeChild(b)});var d=(g.match(/\.([\d,-]+)$/)||[,""])[1];if(d&&!document.getElementById(g)){var u=g.slice(0,g.lastIndexOf(".")),f=document.getElementById(u);f&&(f.hasAttribute("data-line")||f.setAttribute("data-line",""),p(f,d,"temporary ")(),s&&document.querySelector(".temporary.line-highlight").scrollIntoView())}}})();(function(){if(typeof self!="undefined"&&self.Prism&&self.document){var e="line-numbers",t=/\n(?!$)/g,i=w.plugins.lineNumbers={getLine:function(a,o){if(a.tagName==="PRE"&&a.classList.contains(e)){var l=a.querySelector(".line-numbers-rows");if(l){var c=parseInt(a.getAttribute("data-start"),10)||1,p=c+(l.children.length-1);o<c&&(o=c),p<o&&(o=p);var v=o-c;return l.children[v]}}},resize:function(a){r([a])},assumeViewportIndependence:!0},n=function(a){return a?window.getComputedStyle?getComputedStyle(a):a.currentStyle||null:null},s=void 0;window.addEventListener("resize",function(){i.assumeViewportIndependence&&s===window.innerWidth||(s=window.innerWidth,r(Array.prototype.slice.call(document.querySelectorAll("pre."+e))))}),w.hooks.add("complete",function(a){if(a.code){var o=a.element,l=o.parentNode;if(l&&/pre/i.test(l.nodeName)&&!o.querySelector(".line-numbers-rows")&&w.util.isActive(o,e)){o.classList.remove(e),l.classList.add(e);var c,p=a.code.match(t),v=p?p.length+1:1,g=new Array(v+1).join("<span></span>");(c=document.createElement("span")).setAttribute("aria-hidden","true"),c.className="line-numbers-rows",c.innerHTML=g,l.hasAttribute("data-start")&&(l.style.counterReset="linenumber "+(parseInt(l.getAttribute("data-start"),10)-1)),a.element.appendChild(c),r([l]),w.hooks.run("line-numbers",a)}}}),w.hooks.add("line-numbers",function(a){a.plugins=a.plugins||{},a.plugins.lineNumbers=!0})}function r(a){if((a=a.filter(function(l){var c=n(l)["white-space"];return c==="pre-wrap"||c==="pre-line"})).length!=0){var o=a.map(function(l){var c=l.querySelector("code"),p=l.querySelector(".line-numbers-rows");if(c&&p){var v=l.querySelector(".line-numbers-sizer"),g=c.textContent.split(t);v||((v=document.createElement("span")).className="line-numbers-sizer",c.appendChild(v)),v.innerHTML="0",v.style.display="block";var d=v.getBoundingClientRect().height;return v.innerHTML="",{element:l,lines:g,lineHeights:[],oneLinerHeight:d,sizer:v}}}).filter(Boolean);o.forEach(function(l){var c=l.sizer,p=l.lines,v=l.lineHeights,g=l.oneLinerHeight;v[p.length-1]=void 0,p.forEach(function(d,u){if(d&&1<d.length){var f=c.appendChild(document.createElement("span"));f.style.display="block",f.textContent=d}else v[u]=g})}),o.forEach(function(l){for(var c=l.sizer,p=l.lineHeights,v=0,g=0;g<p.length;g++)p[g]===void 0&&(p[g]=c.children[v++].getBoundingClientRect().height)}),o.forEach(function(l){var c=l.sizer,p=l.element.querySelector(".line-numbers-rows");c.style.display="none",c.innerHTML="",l.lineHeights.forEach(function(v,g){p.children[g].style.height=v+"px"})})}}})()});(function(){var e=t();function t(){if(typeof window.CustomEvent=="function")return window.CustomEvent;function s(r,a){a=a||{bubbles:!1,cancelable:!1,detail:void 0};var o=document.createEvent("CustomEvent");return o.initCustomEvent(r,a.bubbles,a.cancelable,a.detail),o}return s.prototype=window.Event.prototype,s}function i(s,r){var a=document.createElement("input");return a.type="hidden",a.name=s,a.value=r,a}function n(s,r){var a=s.getAttribute("data-to"),o=i("_method",s.getAttribute("data-method")),l=i("_csrf_token",s.getAttribute("data-csrf")),c=document.createElement("form"),p=s.getAttribute("target");c.method=s.getAttribute("data-method")==="get"?"get":"post",c.action=a,c.style.display="hidden",p?c.target=p:r&&(c.target="_blank"),c.appendChild(l),c.appendChild(o),document.body.appendChild(c),c.submit()}window.addEventListener("click",function(s){var r=s.target;if(!s.defaultPrevented)for(;r&&r.getAttribute;){var a=new e("phoenix.link.click",{bubbles:!0,cancelable:!0});if(!r.dispatchEvent(a))return s.preventDefault(),s.stopImmediatePropagation(),!1;if(r.getAttribute("data-method"))return n(r,s.metaKey||s.shiftKey),s.preventDefault(),!1;r=r.parentNode}},!1),window.addEventListener("phoenix.link.click",function(s){var r=s.target.getAttribute("data-confirm");r&&!window.confirm(r)&&s.preventDefault()},!1)})();var ve=e=>typeof e=="function"?e:function(){return e},ri=typeof self!="undefined"?self:null,me=typeof window!="undefined"?window:null,be=ri||me||be,ai="2.0.0",G={connecting:0,open:1,closing:2,closed:3},oi=1e4,li=1e3,V={closed:"closed",errored:"errored",joined:"joined",joining:"joining",leaving:"leaving"},ie={close:"phx_close",error:"phx_error",join:"phx_join",reply:"phx_reply",leave:"phx_leave"},qe={longpoll:"longpoll",websocket:"websocket"},hi={complete:4},Pe=class{constructor(e,t,i,n){this.channel=e,this.event=t,this.payload=i||function(){return{}},this.receivedResp=null,this.timeout=n,this.timeoutTimer=null,this.recHooks=[],this.sent=!1}resend(e){this.timeout=e,this.reset(),this.send()}send(){this.hasReceived("timeout")||(this.startTimeout(),this.sent=!0,this.channel.socket.push({topic:this.channel.topic,event:this.event,payload:this.payload(),ref:this.ref,join_ref:this.channel.joinRef()}))}receive(e,t){return this.hasReceived(e)&&t(this.receivedResp.response),this.recHooks.push({status:e,callback:t}),this}reset(){this.cancelRefEvent(),this.ref=null,this.refEvent=null,this.receivedResp=null,this.sent=!1}matchReceive({status:e,response:t,_ref:i}){this.recHooks.filter(n=>n.status===e).forEach(n=>n.callback(t))}cancelRefEvent(){!this.refEvent||this.channel.off(this.refEvent)}cancelTimeout(){clearTimeout(this.timeoutTimer),this.timeoutTimer=null}startTimeout(){this.timeoutTimer&&this.cancelTimeout(),this.ref=this.channel.socket.makeRef(),this.refEvent=this.channel.replyEventName(this.ref),this.channel.on(this.refEvent,e=>{this.cancelRefEvent(),this.cancelTimeout(),this.receivedResp=e,this.matchReceive(e)}),this.timeoutTimer=setTimeout(()=>{this.trigger("timeout",{})},this.timeout)}hasReceived(e){return this.receivedResp&&this.receivedResp.status===e}trigger(e,t){this.channel.trigger(this.refEvent,{status:e,response:t})}},gt=class{constructor(e,t){this.callback=e,this.timerCalc=t,this.timer=null,this.tries=0}reset(){this.tries=0,clearTimeout(this.timer)}scheduleTimeout(){clearTimeout(this.timer),this.timer=setTimeout(()=>{this.tries=this.tries+1,this.callback()},this.timerCalc(this.tries+1))}},di=class{constructor(e,t,i){this.state=V.closed,this.topic=e,this.params=ve(t||{}),this.socket=i,this.bindings=[],this.bindingRef=0,this.timeout=this.socket.timeout,this.joinedOnce=!1,this.joinPush=new Pe(this,ie.join,this.params,this.timeout),this.pushBuffer=[],this.stateChangeRefs=[],this.rejoinTimer=new gt(()=>{this.socket.isConnected()&&this.rejoin()},this.socket.rejoinAfterMs),this.stateChangeRefs.push(this.socket.onError(()=>this.rejoinTimer.reset())),this.stateChangeRefs.push(this.socket.onOpen(()=>{this.rejoinTimer.reset(),this.isErrored()&&this.rejoin()})),this.joinPush.receive("ok",()=>{this.state=V.joined,this.rejoinTimer.reset(),this.pushBuffer.forEach(n=>n.send()),this.pushBuffer=[]}),this.joinPush.receive("error",()=>{this.state=V.errored,this.socket.isConnected()&&this.rejoinTimer.scheduleTimeout()}),this.onClose(()=>{this.rejoinTimer.reset(),this.socket.hasLogger()&&this.socket.log("channel",`close ${this.topic} ${this.joinRef()}`),this.state=V.closed,this.socket.remove(this)}),this.onError(n=>{this.socket.hasLogger()&&this.socket.log("channel",`error ${this.topic}`,n),this.isJoining()&&this.joinPush.reset(),this.state=V.errored,this.socket.isConnected()&&this.rejoinTimer.scheduleTimeout()}),this.joinPush.receive("timeout",()=>{this.socket.hasLogger()&&this.socket.log("channel",`timeout ${this.topic} (${this.joinRef()})`,this.joinPush.timeout),new Pe(this,ie.leave,ve({}),this.timeout).send(),this.state=V.errored,this.joinPush.reset(),this.socket.isConnected()&&this.rejoinTimer.scheduleTimeout()}),this.on(ie.reply,(n,s)=>{this.trigger(this.replyEventName(s),n)})}join(e=this.timeout){if(this.joinedOnce)throw new Error("tried to join multiple times. 'join' can only be called a single time per channel instance");return this.timeout=e,this.joinedOnce=!0,this.rejoin(),this.joinPush}onClose(e){this.on(ie.close,e)}onError(e){return this.on(ie.error,t=>e(t))}on(e,t){let i=this.bindingRef++;return this.bindings.push({event:e,ref:i,callback:t}),i}off(e,t){this.bindings=this.bindings.filter(i=>!(i.event===e&&(typeof t=="undefined"||t===i.ref)))}canPush(){return this.socket.isConnected()&&this.isJoined()}push(e,t,i=this.timeout){if(t=t||{},!this.joinedOnce)throw new Error(`tried to push '${e}' to '${this.topic}' before joining. Use channel.join() before pushing events`);let n=new Pe(this,e,function(){return t},i);return this.canPush()?n.send():(n.startTimeout(),this.pushBuffer.push(n)),n}leave(e=this.timeout){this.rejoinTimer.reset(),this.joinPush.cancelTimeout(),this.state=V.leaving;let t=()=>{this.socket.hasLogger()&&this.socket.log("channel",`leave ${this.topic}`),this.trigger(ie.close,"leave")},i=new Pe(this,ie.leave,ve({}),e);return i.receive("ok",()=>t()).receive("timeout",()=>t()),i.send(),this.canPush()||i.trigger("ok",{}),i}onMessage(e,t,i){return t}isMember(e,t,i,n){return this.topic!==e?!1:n&&n!==this.joinRef()?(this.socket.hasLogger()&&this.socket.log("channel","dropping outdated message",{topic:e,event:t,payload:i,joinRef:n}),!1):!0}joinRef(){return this.joinPush.ref}rejoin(e=this.timeout){this.isLeaving()||(this.socket.leaveOpenTopic(this.topic),this.state=V.joining,this.joinPush.resend(e))}trigger(e,t,i,n){let s=this.onMessage(e,t,i,n);if(t&&!s)throw new Error("channel onMessage callbacks must return the payload, modified or unmodified");let r=this.bindings.filter(a=>a.event===e);for(let a=0;a<r.length;a++)r[a].callback(s,i,n||this.joinRef())}replyEventName(e){return`chan_reply_${e}`}isClosed(){return this.state===V.closed}isErrored(){return this.state===V.errored}isJoined(){return this.state===V.joined}isJoining(){return this.state===V.joining}isLeaving(){return this.state===V.leaving}},Re=class{static request(e,t,i,n,s,r,a){if(be.XDomainRequest){let o=new be.XDomainRequest;return this.xdomainRequest(o,e,t,n,s,r,a)}else{let o=new be.XMLHttpRequest;return this.xhrRequest(o,e,t,i,n,s,r,a)}}static xdomainRequest(e,t,i,n,s,r,a){return e.timeout=s,e.open(t,i),e.onload=()=>{let o=this.parseJSON(e.responseText);a&&a(o)},r&&(e.ontimeout=r),e.onprogress=()=>{},e.send(n),e}static xhrRequest(e,t,i,n,s,r,a,o){return e.open(t,i,!0),e.timeout=r,e.setRequestHeader("Content-Type",n),e.onerror=()=>o&&o(null),e.onreadystatechange=()=>{if(e.readyState===hi.complete&&o){let l=this.parseJSON(e.responseText);o(l)}},a&&(e.ontimeout=a),e.send(s),e}static parseJSON(e){if(!e||e==="")return null;try{return JSON.parse(e)}catch(t){return console&&console.log("failed to parse JSON response",e),null}}static serialize(e,t){let i=[];for(var n in e){if(!Object.prototype.hasOwnProperty.call(e,n))continue;let s=t?`${t}[${n}]`:n,r=e[n];typeof r=="object"?i.push(this.serialize(r,s)):i.push(encodeURIComponent(s)+"="+encodeURIComponent(r))}return i.join("&")}static appendParams(e,t){if(Object.keys(t).length===0)return e;let i=e.match(/\?/)?"&":"?";return`${e}${i}${this.serialize(t)}`}},Xe=class{constructor(e){this.endPoint=null,this.token=null,this.skipHeartbeat=!0,this.reqs=new Set,this.onopen=function(){},this.onerror=function(){},this.onmessage=function(){},this.onclose=function(){},this.pollEndpoint=this.normalizeEndpoint(e),this.readyState=G.connecting,this.poll()}normalizeEndpoint(e){return e.replace("ws://","http://").replace("wss://","https://").replace(new RegExp("(.*)/"+qe.websocket),"$1/"+qe.longpoll)}endpointURL(){return Re.appendParams(this.pollEndpoint,{token:this.token})}closeAndRetry(e,t,i){this.close(e,t,i),this.readyState=G.connecting}ontimeout(){this.onerror("timeout"),this.closeAndRetry(1005,"timeout",!1)}isActive(){return this.readyState===G.open||this.readyState===G.connecting}poll(){this.ajax("GET",null,()=>this.ontimeout(),e=>{if(e){var{status:t,token:i,messages:n}=e;this.token=i}else t=0;switch(t){case 200:n.forEach(s=>{setTimeout(()=>this.onmessage({data:s}),0)}),this.poll();break;case 204:this.poll();break;case 410:this.readyState=G.open,this.onopen({}),this.poll();break;case 403:this.onerror(403),this.close(1008,"forbidden",!1);break;case 0:case 500:this.onerror(500),this.closeAndRetry(1011,"internal server error",500);break;default:throw new Error(`unhandled poll status ${t}`)}})}send(e){this.ajax("POST",e,()=>this.onerror("timeout"),t=>{(!t||t.status!==200)&&(this.onerror(t&&t.status),this.closeAndRetry(1011,"internal server error",!1))})}close(e,t,i){for(let s of this.reqs)s.abort();this.readyState=G.closed;let n=Object.assign({code:1e3,reason:void 0,wasClean:!0},{code:e,reason:t,wasClean:i});typeof CloseEvent!="undefined"?this.onclose(new CloseEvent("close",n)):this.onclose(n)}ajax(e,t,i,n){let s,r=()=>{this.reqs.delete(s),i()};s=Re.request(e,this.endpointURL(),"application/json",t,this.timeout,r,a=>{this.reqs.delete(s),this.isActive()&&n(a)}),this.reqs.add(s)}};var Le={HEADER_LENGTH:1,META_LENGTH:4,KINDS:{push:0,reply:1,broadcast:2},encode(e,t){if(e.payload.constructor===ArrayBuffer)return t(this.binaryEncode(e));{let i=[e.join_ref,e.ref,e.topic,e.event,e.payload];return t(JSON.stringify(i))}},decode(e,t){if(e.constructor===ArrayBuffer)return t(this.binaryDecode(e));{let[i,n,s,r,a]=JSON.parse(e);return t({join_ref:i,ref:n,topic:s,event:r,payload:a})}},binaryEncode(e){let{join_ref:t,ref:i,event:n,topic:s,payload:r}=e,a=this.META_LENGTH+t.length+i.length+s.length+n.length,o=new ArrayBuffer(this.HEADER_LENGTH+a),l=new DataView(o),c=0;l.setUint8(c++,this.KINDS.push),l.setUint8(c++,t.length),l.setUint8(c++,i.length),l.setUint8(c++,s.length),l.setUint8(c++,n.length),Array.from(t,v=>l.setUint8(c++,v.charCodeAt(0))),Array.from(i,v=>l.setUint8(c++,v.charCodeAt(0))),Array.from(s,v=>l.setUint8(c++,v.charCodeAt(0))),Array.from(n,v=>l.setUint8(c++,v.charCodeAt(0)));var p=new Uint8Array(o.byteLength+r.byteLength);return p.set(new Uint8Array(o),0),p.set(new Uint8Array(r),o.byteLength),p.buffer},binaryDecode(e){let t=new DataView(e),i=t.getUint8(0),n=new TextDecoder;switch(i){case this.KINDS.push:return this.decodePush(e,t,n);case this.KINDS.reply:return this.decodeReply(e,t,n);case this.KINDS.broadcast:return this.decodeBroadcast(e,t,n)}},decodePush(e,t,i){let n=t.getUint8(1),s=t.getUint8(2),r=t.getUint8(3),a=this.HEADER_LENGTH+this.META_LENGTH-1,o=i.decode(e.slice(a,a+n));a=a+n;let l=i.decode(e.slice(a,a+s));a=a+s;let c=i.decode(e.slice(a,a+r));a=a+r;let p=e.slice(a,e.byteLength);return{join_ref:o,ref:null,topic:l,event:c,payload:p}},decodeReply(e,t,i){let n=t.getUint8(1),s=t.getUint8(2),r=t.getUint8(3),a=t.getUint8(4),o=this.HEADER_LENGTH+this.META_LENGTH,l=i.decode(e.slice(o,o+n));o=o+n;let c=i.decode(e.slice(o,o+s));o=o+s;let p=i.decode(e.slice(o,o+r));o=o+r;let v=i.decode(e.slice(o,o+a));o=o+a;let g=e.slice(o,e.byteLength),d={status:v,response:g};return{join_ref:l,ref:c,topic:p,event:ie.reply,payload:d}},decodeBroadcast(e,t,i){let n=t.getUint8(1),s=t.getUint8(2),r=this.HEADER_LENGTH+2,a=i.decode(e.slice(r,r+n));r=r+n;let o=i.decode(e.slice(r,r+s));r=r+s;let l=e.slice(r,e.byteLength);return{join_ref:null,ref:null,topic:a,event:o,payload:l}}},mt=class{constructor(e,t={}){this.stateChangeCallbacks={open:[],close:[],error:[],message:[]},this.channels=[],this.sendBuffer=[],this.ref=0,this.timeout=t.timeout||oi,this.transport=t.transport||be.WebSocket||Xe,this.establishedConnections=0,this.defaultEncoder=Le.encode.bind(Le),this.defaultDecoder=Le.decode.bind(Le),this.closeWasClean=!1,this.binaryType=t.binaryType||"arraybuffer",this.connectClock=1,this.transport!==Xe?(this.encode=t.encode||this.defaultEncoder,this.decode=t.decode||this.defaultDecoder):(this.encode=this.defaultEncoder,this.decode=this.defaultDecoder);let i=null;me&&me.addEventListener&&(me.addEventListener("pagehide",n=>{this.conn&&(this.disconnect(),i=this.connectClock)}),me.addEventListener("pageshow",n=>{i===this.connectClock&&(i=null,this.connect())})),this.heartbeatIntervalMs=t.heartbeatIntervalMs||3e4,this.rejoinAfterMs=n=>t.rejoinAfterMs?t.rejoinAfterMs(n):[1e3,2e3,5e3][n-1]||1e4,this.reconnectAfterMs=n=>t.reconnectAfterMs?t.reconnectAfterMs(n):[10,50,100,150,200,250,500,1e3,2e3][n-1]||5e3,this.logger=t.logger||null,this.longpollerTimeout=t.longpollerTimeout||2e4,this.params=ve(t.params||{}),this.endPoint=`${e}/${qe.websocket}`,this.vsn=t.vsn||ai,this.heartbeatTimer=null,this.pendingHeartbeatRef=null,this.reconnectTimer=new gt(()=>{this.teardown(()=>this.connect())},this.reconnectAfterMs)}getLongPollTransport(){return Xe}replaceTransport(e){this.connectClock++,this.closeWasClean=!0,this.reconnectTimer.reset(),this.sendBuffer=[],this.conn&&(this.conn.close(),this.conn=null),this.transport=e}protocol(){return location.protocol.match(/^https/)?"wss":"ws"}endPointURL(){let e=Re.appendParams(Re.appendParams(this.endPoint,this.params()),{vsn:this.vsn});return e.charAt(0)!=="/"?e:e.charAt(1)==="/"?`${this.protocol()}:${e}`:`${this.protocol()}://${location.host}${e}`}disconnect(e,t,i){this.connectClock++,this.closeWasClean=!0,this.reconnectTimer.reset(),this.teardown(e,t,i)}connect(e){e&&(console&&console.log("passing params to connect is deprecated. Instead pass :params to the Socket constructor"),this.params=ve(e)),!this.conn&&(this.connectClock++,this.closeWasClean=!1,this.conn=new this.transport(this.endPointURL()),this.conn.binaryType=this.binaryType,this.conn.timeout=this.longpollerTimeout,this.conn.onopen=()=>this.onConnOpen(),this.conn.onerror=t=>this.onConnError(t),this.conn.onmessage=t=>this.onConnMessage(t),this.conn.onclose=t=>this.onConnClose(t))}log(e,t,i){this.logger(e,t,i)}hasLogger(){return this.logger!==null}onOpen(e){let t=this.makeRef();return this.stateChangeCallbacks.open.push([t,e]),t}onClose(e){let t=this.makeRef();return this.stateChangeCallbacks.close.push([t,e]),t}onError(e){let t=this.makeRef();return this.stateChangeCallbacks.error.push([t,e]),t}onMessage(e){let t=this.makeRef();return this.stateChangeCallbacks.message.push([t,e]),t}ping(e){if(!this.isConnected())return!1;let t=this.makeRef(),i=Date.now();this.push({topic:"phoenix",event:"heartbeat",payload:{},ref:t});let n=this.onMessage(s=>{s.ref===t&&(this.off([n]),e(Date.now()-i))});return!0}onConnOpen(){this.hasLogger()&&this.log("transport",`connected to ${this.endPointURL()}`),this.closeWasClean=!1,this.establishedConnections++,this.flushSendBuffer(),this.reconnectTimer.reset(),this.resetHeartbeat(),this.stateChangeCallbacks.open.forEach(([,e])=>e())}heartbeatTimeout(){this.pendingHeartbeatRef&&(this.pendingHeartbeatRef=null,this.hasLogger()&&this.log("transport","heartbeat timeout. Attempting to re-establish connection"),this.abnormalClose("heartbeat timeout"))}resetHeartbeat(){this.conn&&this.conn.skipHeartbeat||(this.pendingHeartbeatRef=null,clearTimeout(this.heartbeatTimer),setTimeout(()=>this.sendHeartbeat(),this.heartbeatIntervalMs))}teardown(e,t,i){if(!this.conn)return e&&e();this.waitForBufferDone(()=>{this.conn&&(t?this.conn.close(t,i||""):this.conn.close()),this.waitForSocketClosed(()=>{this.conn&&(this.conn.onclose=function(){},this.conn=null),e&&e()})})}waitForBufferDone(e,t=1){if(t===5||!this.conn||!this.conn.bufferedAmount){e();return}setTimeout(()=>{this.waitForBufferDone(e,t+1)},150*t)}waitForSocketClosed(e,t=1){if(t===5||!this.conn||this.conn.readyState===G.closed){e();return}setTimeout(()=>{this.waitForSocketClosed(e,t+1)},150*t)}onConnClose(e){let t=e&&e.code;this.hasLogger()&&this.log("transport","close",e),this.triggerChanError(),clearTimeout(this.heartbeatTimer),!this.closeWasClean&&t!==1e3&&this.reconnectTimer.scheduleTimeout(),this.stateChangeCallbacks.close.forEach(([,i])=>i(e))}onConnError(e){this.hasLogger()&&this.log("transport",e);let t=this.transport,i=this.establishedConnections;this.stateChangeCallbacks.error.forEach(([,n])=>{n(e,t,i)}),(t===this.transport||i>0)&&this.triggerChanError()}triggerChanError(){this.channels.forEach(e=>{e.isErrored()||e.isLeaving()||e.isClosed()||e.trigger(ie.error)})}connectionState(){switch(this.conn&&this.conn.readyState){case G.connecting:return"connecting";case G.open:return"open";case G.closing:return"closing";default:return"closed"}}isConnected(){return this.connectionState()==="open"}remove(e){this.off(e.stateChangeRefs),this.channels=this.channels.filter(t=>t.joinRef()!==e.joinRef())}off(e){for(let t in this.stateChangeCallbacks)this.stateChangeCallbacks[t]=this.stateChangeCallbacks[t].filter(([i])=>e.indexOf(i)===-1)}channel(e,t={}){let i=new di(e,t,this);return this.channels.push(i),i}push(e){if(this.hasLogger()){let{topic:t,event:i,payload:n,ref:s,join_ref:r}=e;this.log("push",`${t} ${i} (${r}, ${s})`,n)}this.isConnected()?this.encode(e,t=>this.conn.send(t)):this.sendBuffer.push(()=>this.encode(e,t=>this.conn.send(t)))}makeRef(){let e=this.ref+1;return e===this.ref?this.ref=0:this.ref=e,this.ref.toString()}sendHeartbeat(){this.pendingHeartbeatRef&&!this.isConnected()||(this.pendingHeartbeatRef=this.makeRef(),this.push({topic:"phoenix",event:"heartbeat",payload:{},ref:this.pendingHeartbeatRef}),this.heartbeatTimer=setTimeout(()=>this.heartbeatTimeout(),this.heartbeatIntervalMs))}abnormalClose(e){this.closeWasClean=!1,this.isConnected()&&this.conn.close(li,e)}flushSendBuffer(){this.isConnected()&&this.sendBuffer.length>0&&(this.sendBuffer.forEach(e=>e()),this.sendBuffer=[])}onConnMessage(e){this.decode(e.data,t=>{let{topic:i,event:n,payload:s,ref:r,join_ref:a}=t;r&&r===this.pendingHeartbeatRef&&(clearTimeout(this.heartbeatTimer),this.pendingHeartbeatRef=null,setTimeout(()=>this.sendHeartbeat(),this.heartbeatIntervalMs)),this.hasLogger()&&this.log("receive",`${s.status||""} ${i} ${n} ${r&&"("+r+")"||""}`,s);for(let o=0;o<this.channels.length;o++){let l=this.channels[o];!l.isMember(i,n,s,a)||l.trigger(n,s,r,a)}for(let o=0;o<this.stateChangeCallbacks.message.length;o++){let[,l]=this.stateChangeCallbacks.message[o];l(t)}})}leaveOpenTopic(e){let t=this.channels.find(i=>i.topic===e&&(i.isJoined()||i.isJoining()));t&&(this.hasLogger()&&this.log("transport",`leaving duplicate topic "${e}"`),t.leave())}};var Ht="consecutive-reloads",ci=10,ui=5e3,fi=1e4,pi=3e4,$t=["phx-click-loading","phx-change-loading","phx-submit-loading","phx-keydown-loading","phx-keyup-loading","phx-blur-loading","phx-focus-loading"],X="data-phx-component",Ke="data-phx-link",gi="track-static",mi="data-phx-link-state",ee="data-phx-ref",he="data-phx-ref-src",Mt="track-uploads",de="data-phx-upload-ref",ht="data-phx-preflighted-refs",vi="data-phx-done-refs",vt="drop-target",nt="data-phx-active-refs",st="phx:live-file:updated",rt="data-phx-skip",bt="data-phx-prune",yt="page-loading",wt="phx-connected",Ge="phx-loading",kt="phx-no-feedback",St="phx-error",ue="data-phx-parent-id",dt="data-phx-main",_e="data-phx-root-id",bi="trigger-action",at="feedback-for",jt="phx-has-focused",yi=["text","textarea","number","email","password","search","tel","url","date","time","datetime-local","color","range"],Ut=["checkbox","radio"],Bt="phx-has-submitted",ae="data-phx-session",fe=`[${ae}]`,At="data-phx-sticky",Ee="data-phx-static",Ye="data-phx-readonly",Ie="data-phx-disabled",ot="disable-with",De="data-phx-disable-with-restore",ye="hook",wi="debounce",ki="throttle",lt="update",Si="key",Y="phxPrivate",Et="auto-recover",Oe="phx:live-socket:debug",Ze="phx:live-socket:profiling",Qe="phx:live-socket:latency-sim",Ai="progress",Ei=1,Ci=200,_i="phx-",Ti=3e4,we="debounce-trigger",Fe="throttled",Ct="debounce-prev-key",xi={debounce:300,throttle:300},_t="d",Z="s",W="c",Tt="e",xt="r",Pt="t",Pi="p",Li=class{constructor(e,t,i){this.liveSocket=i,this.entry=e,this.offset=0,this.chunkSize=t,this.chunkTimer=null,this.uploadChannel=i.channel(`lvu:${e.ref}`,{token:e.metadata()})}error(e){clearTimeout(this.chunkTimer),this.uploadChannel.leave(),this.entry.error(e)}upload(){this.uploadChannel.onError(e=>this.error(e)),this.uploadChannel.join().receive("ok",e=>this.readNextChunk()).receive("error",e=>this.error(e))}isDone(){return this.offset>=this.entry.file.size}readNextChunk(){let e=new window.FileReader,t=this.entry.file.slice(this.offset,this.chunkSize+this.offset);e.onload=i=>{if(i.target.error===null)this.offset+=i.target.result.byteLength,this.pushChunk(i.target.result);else return $("Read error: "+i.target.error)},e.readAsArrayBuffer(t)}pushChunk(e){!this.uploadChannel.isJoined()||this.uploadChannel.push("chunk",e).receive("ok",()=>{this.entry.progress(this.offset/this.entry.file.size*100),this.isDone()||(this.chunkTimer=setTimeout(()=>this.readNextChunk(),this.liveSocket.getLatencySim()||0))})}},$=(e,t)=>console.error&&console.error(e,t),re=e=>{let t=typeof e;return t==="number"||t==="string"&&/^(0|[1-9]\d*)$/.test(e)};function Ri(){let e=new Set,t=document.querySelectorAll("*[id]");for(let i=0,n=t.length;i<n;i++)e.has(t[i].id)?console.error(`Multiple IDs detected: ${t[i].id}. Ensure unique element ids.`):e.add(t[i].id)}var Ii=(e,t,i,n)=>{e.liveSocket.isDebugEnabled()&&console.log(`${e.id} ${t}: ${i} - `,n)},et=e=>typeof e=="function"?e:function(){return e},je=e=>JSON.parse(JSON.stringify(e)),Ce=(e,t,i)=>{do{if(e.matches(`[${t}]`))return e;e=e.parentElement||e.parentNode}while(e!==null&&e.nodeType===1&&!(i&&i.isSameNode(e)||e.matches(fe)));return null},ke=e=>e!==null&&typeof e=="object"&&!(e instanceof Array),Di=(e,t)=>JSON.stringify(e)===JSON.stringify(t),Lt=e=>{for(let t in e)return!1;return!0},ne=(e,t)=>e&&t(e),Oi=function(e,t,i,n){e.forEach(s=>{new Li(s,i.config.chunk_size,n).upload()})},Jt={canPushState(){return typeof history.pushState!="undefined"},dropLocal(e,t,i){return e.removeItem(this.localKey(t,i))},updateLocal(e,t,i,n,s){let r=this.getLocal(e,t,i),a=this.localKey(t,i),o=r===null?n:s(r);return e.setItem(a,JSON.stringify(o)),o},getLocal(e,t,i){return JSON.parse(e.getItem(this.localKey(t,i)))},updateCurrentState(e){!this.canPushState()||history.replaceState(e(history.state||{}),"",window.location.href)},pushState(e,t,i){if(this.canPushState()){if(i!==window.location.href){if(t.type=="redirect"&&t.scroll){let s=history.state||{};s.scroll=t.scroll,history.replaceState(s,"",window.location.href)}delete t.scroll,history[e+"State"](t,"",i||null);let n=this.getHashTargetEl(window.location.hash);n?n.scrollIntoView():t.type==="redirect"&&window.scroll(0,0)}}else this.redirect(i)},setCookie(e,t){document.cookie=`${e}=${t}`},getCookie(e){return document.cookie.replace(new RegExp(`(?:(?:^|.*;s*)${e}s*=s*([^;]*).*$)|^.*$`),"$1")},redirect(e,t){t&&Jt.setCookie("__phoenix_flash__",t+"; max-age=60000; path=/"),window.location=e},localKey(e,t){return`${e}-${t}`},getHashTargetEl(e){let t=e.toString().substring(1);if(t!=="")return document.getElementById(t)||document.querySelector(`a[name="${t}"]`)}},se=Jt,K={byId(e){return document.getElementById(e)||$(`no id found for ${e}`)},removeClass(e,t){e.classList.remove(t),e.classList.length===0&&e.removeAttribute("class")},all(e,t,i){if(!e)return[];let n=Array.from(e.querySelectorAll(t));return i?n.forEach(i):n},childNodeLength(e){let t=document.createElement("template");return t.innerHTML=e,t.content.childElementCount},isUploadInput(e){return e.type==="file"&&e.getAttribute(de)!==null},findUploadInputs(e){return this.all(e,`input[type="file"][${de}]`)},findComponentNodeList(e,t){return this.filterWithinSameLiveView(this.all(e,`[${X}="${t}"]`),e)},isPhxDestroyed(e){return!!(e.id&&K.private(e,"destroyed"))},markPhxChildDestroyed(e){this.isPhxChild(e)&&e.setAttribute(ae,""),this.putPrivate(e,"destroyed",!0)},findPhxChildrenInFragment(e,t){let i=document.createElement("template");return i.innerHTML=e,this.findPhxChildren(i.content,t)},isIgnored(e,t){return(e.getAttribute(t)||e.getAttribute("data-phx-update"))==="ignore"},isPhxUpdate(e,t,i){return e.getAttribute&&i.indexOf(e.getAttribute(t))>=0},findPhxSticky(e){return this.all(e,`[${At}]`)},findPhxChildren(e,t){return this.all(e,`${fe}[${ue}="${t}"]`)},findParentCIDs(e,t){let i=new Set(t);return t.reduce((n,s)=>{let r=`[${X}="${s}"] [${X}]`;return this.filterWithinSameLiveView(this.all(e,r),e).map(a=>parseInt(a.getAttribute(X))).forEach(a=>n.delete(a)),n},i)},filterWithinSameLiveView(e,t){return t.querySelector(fe)?e.filter(i=>this.withinSameLiveView(i,t)):e},withinSameLiveView(e,t){for(;e=e.parentNode;){if(e.isSameNode(t))return!0;if(e.getAttribute(ae)!==null)return!1}},private(e,t){return e[Y]&&e[Y][t]},deletePrivate(e,t){e[Y]&&delete e[Y][t]},putPrivate(e,t,i){e[Y]||(e[Y]={}),e[Y][t]=i},updatePrivate(e,t,i,n){let s=this.private(e,t);s===void 0?this.putPrivate(e,t,n(i)):this.putPrivate(e,t,n(s))},copyPrivates(e,t){t[Y]&&(e[Y]=t[Y])},putTitle(e){let t=document.querySelector("title"),{prefix:i,suffix:n}=t.dataset;document.title=`${i||""}${e}${n||""}`},debounce(e,t,i,n,s,r,a,o){let l=e.getAttribute(i),c=e.getAttribute(s);l===""&&(l=n),c===""&&(c=r);let p=l||c;switch(p){case null:return o();case"blur":this.once(e,"debounce-blur")&&e.addEventListener("blur",()=>o());return;default:let v=parseInt(p),g=()=>c?this.deletePrivate(e,Fe):o(),d=this.incCycle(e,we,g);if(isNaN(v))return $(`invalid throttle/debounce value: ${p}`);if(c){let f=!1;if(t.type==="keydown"){let b=this.private(e,Ct);this.putPrivate(e,Ct,t.key),f=b!==t.key}if(!f&&this.private(e,Fe))return!1;o(),this.putPrivate(e,Fe,!0),setTimeout(()=>{a()&&this.triggerCycle(e,we)},v)}else setTimeout(()=>{a()&&this.triggerCycle(e,we,d)},v);let u=e.form;u&&this.once(u,"bind-debounce")&&u.addEventListener("submit",()=>{Array.from(new FormData(u).entries(),([f])=>{let b=u.querySelector(`[name="${f}"]`);this.incCycle(b,we),this.deletePrivate(b,Fe)})}),this.once(e,"bind-debounce")&&e.addEventListener("blur",()=>this.triggerCycle(e,we))}},triggerCycle(e,t,i){let[n,s]=this.private(e,t);i||(i=n),i===n&&(this.incCycle(e,t),s())},once(e,t){return this.private(e,t)===!0?!1:(this.putPrivate(e,t,!0),!0)},incCycle(e,t,i=function(){}){let[n]=this.private(e,t)||[0,i];return n++,this.putPrivate(e,t,[n,i]),n},discardError(e,t,i){let n=t.getAttribute&&t.getAttribute(i),s=n&&e.querySelector(`[id="${n}"], [name="${n}"]`);!s||this.private(s,jt)||this.private(s.form,Bt)||t.classList.add(kt)},showError(e,t){(e.id||e.name)&&this.all(e.form,`[${t}="${e.id}"], [${t}="${e.name}"]`,i=>{this.removeClass(i,kt)})},isPhxChild(e){return e.getAttribute&&e.getAttribute(ue)},isPhxSticky(e){return e.getAttribute&&e.getAttribute(At)!==null},firstPhxChild(e){return this.isPhxChild(e)?e:this.all(e,`[${ue}]`)[0]},dispatchEvent(e,t,i={}){let s={bubbles:i.bubbles===void 0?!0:!!i.bubbles,cancelable:!0,detail:i.detail||{}},r=t==="click"?new MouseEvent("click",s):new CustomEvent(t,s);e.dispatchEvent(r)},cloneNode(e,t){if(typeof t=="undefined")return e.cloneNode(!0);{let i=e.cloneNode(!1);return i.innerHTML=t,i}},mergeAttrs(e,t,i={}){let n=i.exclude||[],s=i.isIgnored,r=t.attributes;for(let o=r.length-1;o>=0;o--){let l=r[o].name;n.indexOf(l)<0&&e.setAttribute(l,t.getAttribute(l))}let a=e.attributes;for(let o=a.length-1;o>=0;o--){let l=a[o].name;s?l.startsWith("data-")&&!t.hasAttribute(l)&&e.removeAttribute(l):t.hasAttribute(l)||e.removeAttribute(l)}},mergeFocusedInput(e,t){e instanceof HTMLSelectElement||K.mergeAttrs(e,t,{exclude:["value"]}),t.readOnly?e.setAttribute("readonly",!0):e.removeAttribute("readonly")},hasSelectionRange(e){return e.setSelectionRange&&(e.type==="text"||e.type==="textarea")},restoreFocus(e,t,i){if(!K.isTextualInput(e))return;let n=e.matches(":focus");e.readOnly&&e.blur(),n||e.focus(),this.hasSelectionRange(e)&&e.setSelectionRange(t,i)},isFormInput(e){return/^(?:input|select|textarea)$/i.test(e.tagName)&&e.type!=="button"},syncAttrsToProps(e){e instanceof HTMLInputElement&&Ut.indexOf(e.type.toLocaleLowerCase())>=0&&(e.checked=e.getAttribute("checked")!==null)},isTextualInput(e){return yi.indexOf(e.type)>=0},isNowTriggerFormExternal(e,t){return e.getAttribute&&e.getAttribute(t)!==null},syncPendingRef(e,t,i){let n=e.getAttribute(ee);if(n===null)return!0;let s=e.getAttribute(he);return K.isFormInput(e)||e.getAttribute(i)!==null?(K.isUploadInput(e)&&K.mergeAttrs(e,t,{isIgnored:!0}),K.putPrivate(e,ee,t),!1):($t.forEach(r=>{e.classList.contains(r)&&t.classList.add(r)}),t.setAttribute(ee,n),t.setAttribute(he,s),!0)},cleanChildNodes(e,t){if(K.isPhxUpdate(e,t,["append","prepend"])){let i=[];e.childNodes.forEach(n=>{n.id||(n.nodeType===Node.TEXT_NODE&&n.nodeValue.trim()===""||$(`only HTML element tags with an id are allowed inside containers with phx-update.

removing illegal node: "${(n.outerHTML||n.nodeValue).trim()}"

`),i.push(n))}),i.forEach(n=>n.remove())}},replaceRootContainer(e,t,i){let n=new Set(["id",ae,Ee,dt,_e]);if(e.tagName.toLowerCase()===t.toLowerCase())return Array.from(e.attributes).filter(s=>!n.has(s.name.toLowerCase())).forEach(s=>e.removeAttribute(s.name)),Object.keys(i).filter(s=>!n.has(s.toLowerCase())).forEach(s=>e.setAttribute(s,i[s])),e;{let s=document.createElement(t);return Object.keys(i).forEach(r=>s.setAttribute(r,i[r])),n.forEach(r=>s.setAttribute(r,e.getAttribute(r))),s.innerHTML=e.innerHTML,e.replaceWith(s),s}},getSticky(e,t,i){let n=(K.private(e,"sticky")||[]).find(([s])=>t===s);if(n){let[s,r,a]=n;return a}else return typeof i=="function"?i():i},deleteSticky(e,t){this.updatePrivate(e,"sticky",[],i=>i.filter(([n,s])=>n!==t))},putSticky(e,t,i){let n=i(e);this.updatePrivate(e,"sticky",[],s=>{let r=s.findIndex(([a])=>t===a);return r>=0?s[r]=[t,i,n]:s.push([t,i,n]),s})},applyStickyOperations(e){let t=K.private(e,"sticky");!t||t.forEach(([i,n,s])=>this.putSticky(e,i,n))}},m=K,tt=class{static isActive(e,t){let i=t._phxRef===void 0,s=e.getAttribute(nt).split(",").indexOf(H.genFileRef(t))>=0;return t.size>0&&(i||s)}static isPreflighted(e,t){return e.getAttribute(ht).split(",").indexOf(H.genFileRef(t))>=0&&this.isActive(e,t)}constructor(e,t,i){this.ref=H.genFileRef(t),this.fileEl=e,this.file=t,this.view=i,this.meta=null,this._isCancelled=!1,this._isDone=!1,this._progress=0,this._lastProgressSent=-1,this._onDone=function(){},this._onElUpdated=this.onElUpdated.bind(this),this.fileEl.addEventListener(st,this._onElUpdated)}metadata(){return this.meta}progress(e){this._progress=Math.floor(e),this._progress>this._lastProgressSent&&(this._progress>=100?(this._progress=100,this._lastProgressSent=100,this._isDone=!0,this.view.pushFileProgress(this.fileEl,this.ref,100,()=>{H.untrackFile(this.fileEl,this.file),this._onDone()})):(this._lastProgressSent=this._progress,this.view.pushFileProgress(this.fileEl,this.ref,this._progress)))}cancel(){this._isCancelled=!0,this._isDone=!0,this._onDone()}isDone(){return this._isDone}error(e="failed"){this.view.pushFileProgress(this.fileEl,this.ref,{error:e}),H.clearFiles(this.fileEl)}onDone(e){this._onDone=()=>{this.fileEl.removeEventListener(st,this._onElUpdated),e()}}onElUpdated(){this.fileEl.getAttribute(nt).split(",").indexOf(this.ref)===-1&&this.cancel()}toPreflightPayload(){return{last_modified:this.file.lastModified,name:this.file.name,size:this.file.size,type:this.file.type,ref:this.ref}}uploader(e){if(this.meta.uploader){let t=e[this.meta.uploader]||$(`no uploader configured for ${this.meta.uploader}`);return{name:this.meta.uploader,callback:t}}else return{name:"channel",callback:Oi}}zipPostFlight(e){this.meta=e.entries[this.ref],this.meta||$(`no preflight upload response returned with ref ${this.ref}`,{input:this.fileEl,response:e})}},Fi=0,H=class{static genFileRef(e){let t=e._phxRef;return t!==void 0?t:(e._phxRef=(Fi++).toString(),e._phxRef)}static getEntryDataURL(e,t,i){let n=this.activeFiles(e).find(s=>this.genFileRef(s)===t);i(URL.createObjectURL(n))}static hasUploadsInProgress(e){let t=0;return m.findUploadInputs(e).forEach(i=>{i.getAttribute(ht)!==i.getAttribute(vi)&&t++}),t>0}static serializeUploads(e){let t=this.activeFiles(e),i={};return t.forEach(n=>{let s={path:e.name},r=e.getAttribute(de);i[r]=i[r]||[],s.ref=this.genFileRef(n),s.name=n.name||s.ref,s.type=n.type,s.size=n.size,i[r].push(s)}),i}static clearFiles(e){e.value=null,e.removeAttribute(de),m.putPrivate(e,"files",[])}static untrackFile(e,t){m.putPrivate(e,"files",m.private(e,"files").filter(i=>!Object.is(i,t)))}static trackFiles(e,t){if(e.getAttribute("multiple")!==null){let i=t.filter(n=>!this.activeFiles(e).find(s=>Object.is(s,n)));m.putPrivate(e,"files",this.activeFiles(e).concat(i)),e.value=null}else m.putPrivate(e,"files",t)}static activeFileInputs(e){let t=m.findUploadInputs(e);return Array.from(t).filter(i=>i.files&&this.activeFiles(i).length>0)}static activeFiles(e){return(m.private(e,"files")||[]).filter(t=>tt.isActive(e,t))}static inputsAwaitingPreflight(e){let t=m.findUploadInputs(e);return Array.from(t).filter(i=>this.filesAwaitingPreflight(i).length>0)}static filesAwaitingPreflight(e){return this.activeFiles(e).filter(t=>!tt.isPreflighted(e,t))}constructor(e,t,i){this.view=t,this.onComplete=i,this._entries=Array.from(H.filesAwaitingPreflight(e)||[]).map(n=>new tt(e,n,t)),this.numEntriesInProgress=this._entries.length}entries(){return this._entries}initAdapterUpload(e,t,i){this._entries=this._entries.map(s=>(s.zipPostFlight(e),s.onDone(()=>{this.numEntriesInProgress--,this.numEntriesInProgress===0&&this.onComplete()}),s));let n=this._entries.reduce((s,r)=>{let{name:a,callback:o}=r.uploader(i.uploaders);return s[a]=s[a]||{callback:o,entries:[]},s[a].entries.push(r),s},{});for(let s in n){let{callback:r,entries:a}=n[s];r(a,t,e,i)}}},Ni={LiveFileUpload:{activeRefs(){return this.el.getAttribute(nt)},preflightedRefs(){return this.el.getAttribute(ht)},mounted(){this.preflightedWas=this.preflightedRefs()},updated(){let e=this.preflightedRefs();this.preflightedWas!==e&&(this.preflightedWas=e,e===""&&this.__view.cancelSubmit(this.el.form)),this.activeRefs()===""&&(this.el.value=null),this.el.dispatchEvent(new CustomEvent(st))}},LiveImgPreview:{mounted(){this.ref=this.el.getAttribute("data-phx-entry-ref"),this.inputEl=document.getElementById(this.el.getAttribute(de)),H.getEntryDataURL(this.inputEl,this.ref,e=>{this.url=e,this.el.src=e})},destroyed(){URL.revokeObjectURL(this.url)}}},Hi=Ni,$i=class{constructor(e,t,i){let n=new Set,s=new Set([...t.children].map(a=>a.id)),r=[];Array.from(e.children).forEach(a=>{if(a.id&&(n.add(a.id),s.has(a.id))){let o=a.previousElementSibling&&a.previousElementSibling.id;r.push({elementId:a.id,previousElementId:o})}}),this.containerId=t.id,this.updateType=i,this.elementsToModify=r,this.elementIdsToAdd=[...s].filter(a=>!n.has(a))}perform(){let e=m.byId(this.containerId);this.elementsToModify.forEach(t=>{t.previousElementId?ne(document.getElementById(t.previousElementId),i=>{ne(document.getElementById(t.elementId),n=>{n.previousElementSibling&&n.previousElementSibling.id==i.id||i.insertAdjacentElement("afterend",n)})}):ne(document.getElementById(t.elementId),i=>{i.previousElementSibling==null||e.insertAdjacentElement("afterbegin",i)})}),this.updateType=="prepend"&&this.elementIdsToAdd.reverse().forEach(t=>{ne(document.getElementById(t),i=>e.insertAdjacentElement("afterbegin",i))})}},Rt=11;function Mi(e,t){var i=t.attributes,n,s,r,a,o;if(!(t.nodeType===Rt||e.nodeType===Rt)){for(var l=i.length-1;l>=0;l--)n=i[l],s=n.name,r=n.namespaceURI,a=n.value,r?(s=n.localName||s,o=e.getAttributeNS(r,s),o!==a&&(n.prefix==="xmlns"&&(s=n.name),e.setAttributeNS(r,s,a))):(o=e.getAttribute(s),o!==a&&e.setAttribute(s,a));for(var c=e.attributes,p=c.length-1;p>=0;p--)n=c[p],s=n.name,r=n.namespaceURI,r?(s=n.localName||s,t.hasAttributeNS(r,s)||e.removeAttributeNS(r,s)):t.hasAttribute(s)||e.removeAttribute(s)}}var Ne,ji="http://www.w3.org/1999/xhtml",j=typeof document=="undefined"?void 0:document,Ui=!!j&&"content"in j.createElement("template"),Bi=!!j&&j.createRange&&"createContextualFragment"in j.createRange();function Ji(e){var t=j.createElement("template");return t.innerHTML=e,t.content.childNodes[0]}function zi(e){Ne||(Ne=j.createRange(),Ne.selectNode(j.body));var t=Ne.createContextualFragment(e);return t.childNodes[0]}function Vi(e){var t=j.createElement("body");return t.innerHTML=e,t.childNodes[0]}function Wi(e){return e=e.trim(),Ui?Ji(e):Bi?zi(e):Vi(e)}function He(e,t){var i=e.nodeName,n=t.nodeName,s,r;return i===n?!0:(s=i.charCodeAt(0),r=n.charCodeAt(0),s<=90&&r>=97?i===n.toUpperCase():r<=90&&s>=97?n===i.toUpperCase():!1)}function Xi(e,t){return!t||t===ji?j.createElement(e):j.createElementNS(t,e)}function qi(e,t){for(var i=e.firstChild;i;){var n=i.nextSibling;t.appendChild(i),i=n}return t}function it(e,t,i){e[i]!==t[i]&&(e[i]=t[i],e[i]?e.setAttribute(i,""):e.removeAttribute(i))}var It={OPTION:function(e,t){var i=e.parentNode;if(i){var n=i.nodeName.toUpperCase();n==="OPTGROUP"&&(i=i.parentNode,n=i&&i.nodeName.toUpperCase()),n==="SELECT"&&!i.hasAttribute("multiple")&&(e.hasAttribute("selected")&&!t.selected&&(e.setAttribute("selected","selected"),e.removeAttribute("selected")),i.selectedIndex=-1)}it(e,t,"selected")},INPUT:function(e,t){it(e,t,"checked"),it(e,t,"disabled"),e.value!==t.value&&(e.value=t.value),t.hasAttribute("value")||e.removeAttribute("value")},TEXTAREA:function(e,t){var i=t.value;e.value!==i&&(e.value=i);var n=e.firstChild;if(n){var s=n.nodeValue;if(s==i||!i&&s==e.placeholder)return;n.nodeValue=i}},SELECT:function(e,t){if(!t.hasAttribute("multiple")){for(var i=-1,n=0,s=e.firstChild,r,a;s;)if(a=s.nodeName&&s.nodeName.toUpperCase(),a==="OPTGROUP")r=s,s=r.firstChild;else{if(a==="OPTION"){if(s.hasAttribute("selected")){i=n;break}n++}s=s.nextSibling,!s&&r&&(s=r.nextSibling,r=null)}e.selectedIndex=i}}},Se=1,Ki=11,Dt=3,Ot=8;function le(){}function Gi(e){if(e)return e.getAttribute&&e.getAttribute("id")||e.id}function Yi(e){return function(i,n,s){if(s||(s={}),typeof n=="string")if(i.nodeName==="#document"||i.nodeName==="HTML"||i.nodeName==="BODY"){var r=n;n=j.createElement("html"),n.innerHTML=r}else n=Wi(n);var a=s.getNodeKey||Gi,o=s.onBeforeNodeAdded||le,l=s.onNodeAdded||le,c=s.onBeforeElUpdated||le,p=s.onElUpdated||le,v=s.onBeforeNodeDiscarded||le,g=s.onNodeDiscarded||le,d=s.onBeforeElChildrenUpdated||le,u=s.childrenOnly===!0,f=Object.create(null),b=[];function y(E){b.push(E)}function A(E,C){if(E.nodeType===Se)for(var S=E.firstChild;S;){var _=void 0;C&&(_=a(S))?y(_):(g(S),S.firstChild&&A(S,C)),S=S.nextSibling}}function h(E,C,S){v(E)!==!1&&(C&&C.removeChild(E),g(E),A(E,S))}function k(E){if(E.nodeType===Se||E.nodeType===Ki)for(var C=E.firstChild;C;){var S=a(C);S&&(f[S]=C),k(C),C=C.nextSibling}}k(i);function x(E){l(E);for(var C=E.firstChild;C;){var S=C.nextSibling,_=a(C);if(_){var P=f[_];P&&He(C,P)?(C.parentNode.replaceChild(P,C),q(P,C)):x(C)}else x(C);C=S}}function N(E,C,S){for(;C;){var _=C.nextSibling;(S=a(C))?y(S):h(C,E,!0),C=_}}function q(E,C,S){var _=a(C);_&&delete f[_],!(!S&&(c(E,C)===!1||(e(E,C),p(E),d(E,C)===!1)))&&(E.nodeName!=="TEXTAREA"?M(E,C):It.TEXTAREA(E,C))}function M(E,C){var S=C.firstChild,_=E.firstChild,P,O,B,J,z;e:for(;S;){for(J=S.nextSibling,P=a(S);_;){if(B=_.nextSibling,S.isSameNode&&S.isSameNode(_)){S=J,_=B;continue e}O=a(_);var ce=_.nodeType,F=void 0;if(ce===S.nodeType&&(ce===Se?(P?P!==O&&((z=f[P])?B===z?F=!1:(E.insertBefore(z,_),O?y(O):h(_,E,!0),_=z):F=!1):O&&(F=!1),F=F!==!1&&He(_,S),F&&q(_,S)):(ce===Dt||ce==Ot)&&(F=!0,_.nodeValue!==S.nodeValue&&(_.nodeValue=S.nodeValue))),F){S=J,_=B;continue e}O?y(O):h(_,E,!0),_=B}if(P&&(z=f[P])&&He(z,S))E.appendChild(z),q(z,S);else{var te=o(S);te!==!1&&(te&&(S=te),S.actualize&&(S=S.actualize(E.ownerDocument||j)),E.appendChild(S),x(S))}S=J,_=B}N(E,_,O);var oe=It[E.nodeName];oe&&oe(E,C)}var T=i,R=T.nodeType,I=n.nodeType;if(!u){if(R===Se)I===Se?He(i,n)||(g(i),T=qi(i,Xi(n.nodeName,n.namespaceURI))):T=n;else if(R===Dt||R===Ot){if(I===R)return T.nodeValue!==n.nodeValue&&(T.nodeValue=n.nodeValue),T;T=n}}if(T===n)g(i);else{if(n.isSameNode&&n.isSameNode(T))return;if(q(T,n,u),b)for(var L=0,D=b.length;L<D;L++){var U=f[b[L]];U&&h(U,U.parentNode,!1)}}return!u&&T!==i&&i.parentNode&&(T.actualize&&(T=T.actualize(i.ownerDocument||j)),i.parentNode.replaceChild(T,i)),T}}var Zi=Yi(Mi),Ft=Zi,$e=class{static patchEl(e,t,i){Ft(e,t,{childrenOnly:!1,onBeforeElUpdated:(n,s)=>{if(i&&i.isSameNode(n)&&m.isFormInput(n))return m.mergeFocusedInput(n,s),!1}})}constructor(e,t,i,n,s){this.view=e,this.liveSocket=e.liveSocket,this.container=t,this.id=i,this.rootID=e.root.id,this.html=n,this.targetCID=s,this.cidPatch=re(this.targetCID),this.callbacks={beforeadded:[],beforeupdated:[],beforephxChildAdded:[],afteradded:[],afterupdated:[],afterdiscarded:[],afterphxChildAdded:[],aftertransitionsDiscarded:[]}}before(e,t){this.callbacks[`before${e}`].push(t)}after(e,t){this.callbacks[`after${e}`].push(t)}trackBefore(e,...t){this.callbacks[`before${e}`].forEach(i=>i(...t))}trackAfter(e,...t){this.callbacks[`after${e}`].forEach(i=>i(...t))}markPrunableContentForRemoval(){m.all(this.container,"[phx-update=append] > *, [phx-update=prepend] > *",e=>{e.setAttribute(bt,"")})}perform(){let{view:e,liveSocket:t,container:i,html:n}=this,s=this.isCIDPatch()?this.targetCIDContainer(n):i;if(this.isCIDPatch()&&!s)return;let r=t.getActiveElement(),{selectionStart:a,selectionEnd:o}=r&&m.hasSelectionRange(r)?r:{},l=t.binding(lt),c=t.binding(at),p=t.binding(ot),v=t.binding(bi),g=t.binding("remove"),d=[],u=[],f=[],b=[],y=null,A=t.time("premorph container prep",()=>this.buildDiffHTML(i,n,l,s));return this.trackBefore("added",i),this.trackBefore("updated",i,i),t.time("morphdom",()=>{Ft(s,A,{childrenOnly:s.getAttribute(X)===null,getNodeKey:h=>m.isPhxDestroyed(h)?null:h.id,onBeforeNodeAdded:h=>(this.trackBefore("added",h),h),onNodeAdded:h=>{h instanceof HTMLImageElement&&h.srcset?h.srcset=h.srcset:h instanceof HTMLVideoElement&&h.autoplay&&h.play(),m.isNowTriggerFormExternal(h,v)&&(y=h),m.discardError(s,h,c),(m.isPhxChild(h)&&e.ownsElement(h)||m.isPhxSticky(h)&&e.ownsElement(h.parentNode))&&this.trackAfter("phxChildAdded",h),d.push(h)},onNodeDiscarded:h=>{(m.isPhxChild(h)||m.isPhxSticky(h))&&t.destroyViewByEl(h),this.trackAfter("discarded",h)},onBeforeNodeDiscarded:h=>h.getAttribute&&h.getAttribute(bt)!==null?!0:h.parentNode!==null&&m.isPhxUpdate(h.parentNode,l,["append","prepend"])&&h.id?!1:h.getAttribute&&h.getAttribute(g)?(b.push(h),!1):!this.skipCIDSibling(h),onElUpdated:h=>{m.isNowTriggerFormExternal(h,v)&&(y=h),u.push(h)},onBeforeElUpdated:(h,k)=>{if(m.cleanChildNodes(k,l),this.skipCIDSibling(k)||m.isPhxSticky(h))return!1;if(m.isIgnored(h,l))return this.trackBefore("updated",h,k),m.mergeAttrs(h,k,{isIgnored:!0}),u.push(h),m.applyStickyOperations(h),!1;if(h.type==="number"&&h.validity&&h.validity.badInput)return!1;if(!m.syncPendingRef(h,k,p))return m.isUploadInput(h)&&(this.trackBefore("updated",h,k),u.push(h)),m.applyStickyOperations(h),!1;if(m.isPhxChild(k)){let N=h.getAttribute(ae);return m.mergeAttrs(h,k,{exclude:[Ee]}),N!==""&&h.setAttribute(ae,N),h.setAttribute(_e,this.rootID),m.applyStickyOperations(h),!1}return m.copyPrivates(k,h),m.discardError(s,k,c),r&&h.isSameNode(r)&&m.isFormInput(h)?(this.trackBefore("updated",h,k),m.mergeFocusedInput(h,k),m.syncAttrsToProps(h),u.push(h),m.applyStickyOperations(h),!1):(m.isPhxUpdate(k,l,["append","prepend"])&&f.push(new $i(h,k,k.getAttribute(l))),m.syncAttrsToProps(k),m.applyStickyOperations(k),this.trackBefore("updated",h,k),!0)}})}),t.isDebugEnabled()&&Ri(),f.length>0&&t.time("post-morph append/prepend restoration",()=>{f.forEach(h=>h.perform())}),t.silenceEvents(()=>m.restoreFocus(r,a,o)),m.dispatchEvent(document,"phx:update"),d.forEach(h=>this.trackAfter("added",h)),u.forEach(h=>this.trackAfter("updated",h)),b.length>0&&(t.transitionRemoves(b),t.requestDOMUpdate(()=>{b.forEach(h=>{let k=m.firstPhxChild(h);k&&t.destroyViewByEl(k),h.remove()}),this.trackAfter("transitionsDiscarded",b)})),y&&(t.disconnect(),y.submit()),!0}isCIDPatch(){return this.cidPatch}skipCIDSibling(e){return e.nodeType===Node.ELEMENT_NODE&&e.getAttribute(rt)!==null}targetCIDContainer(e){if(!this.isCIDPatch())return;let[t,...i]=m.findComponentNodeList(this.container,this.targetCID);return i.length===0&&m.childNodeLength(e)===1?t:t&&t.parentNode}buildDiffHTML(e,t,i,n){let s=this.isCIDPatch(),r=s&&n.getAttribute(X)===this.targetCID.toString();if(!s||r)return t;{let a=null,o=document.createElement("template");a=m.cloneNode(n);let[l,...c]=m.findComponentNodeList(a,this.targetCID);return o.innerHTML=t,c.forEach(p=>p.remove()),Array.from(a.childNodes).forEach(p=>{p.id&&p.nodeType===Node.ELEMENT_NODE&&p.getAttribute(X)!==this.targetCID.toString()&&(p.setAttribute(rt,""),p.innerHTML="")}),Array.from(o.content.childNodes).forEach(p=>a.insertBefore(p,l)),l.remove(),a.outerHTML}}},Nt=class{static extract(e){let{[xt]:t,[Tt]:i,[Pt]:n}=e;return delete e[xt],delete e[Tt],delete e[Pt],{diff:e,title:n,reply:t||null,events:i||[]}}constructor(e,t){this.viewId=e,this.rendered={},this.mergeDiff(t)}parentViewId(){return this.viewId}toString(e){return this.recursiveToString(this.rendered,this.rendered[W],e)}recursiveToString(e,t=e[W],i){i=i?new Set(i):null;let n={buffer:"",components:t,onlyCids:i};return this.toOutputBuffer(e,null,n),n.buffer}componentCIDs(e){return Object.keys(e[W]||{}).map(t=>parseInt(t))}isComponentOnlyDiff(e){return e[W]?Object.keys(e).length===1:!1}getComponent(e,t){return e[W][t]}mergeDiff(e){let t=e[W],i={};if(delete e[W],this.rendered=this.mutableMerge(this.rendered,e),this.rendered[W]=this.rendered[W]||{},t){let n=this.rendered[W];for(let s in t)t[s]=this.cachedFindComponent(s,t[s],n,t,i);for(let s in t)n[s]=t[s];e[W]=t}}cachedFindComponent(e,t,i,n,s){if(s[e])return s[e];{let r,a,o=t[Z];if(re(o)){let l;o>0?l=this.cachedFindComponent(o,n[o],i,n,s):l=i[-o],a=l[Z],r=this.cloneMerge(l,t),r[Z]=a}else r=t[Z]!==void 0?t:this.cloneMerge(i[e]||{},t);return s[e]=r,r}}mutableMerge(e,t){return t[Z]!==void 0?t:(this.doMutableMerge(e,t),e)}doMutableMerge(e,t){for(let i in t){let n=t[i],s=e[i];ke(n)&&n[Z]===void 0&&ke(s)?this.doMutableMerge(s,n):e[i]=n}}cloneMerge(e,t){let i=ge(ge({},e),t);for(let n in i){let s=t[n],r=e[n];ke(s)&&s[Z]===void 0&&ke(r)&&(i[n]=this.cloneMerge(r,s))}return i}componentToString(e){return this.recursiveCIDToString(this.rendered[W],e)}pruneCIDs(e){e.forEach(t=>delete this.rendered[W][t])}get(){return this.rendered}isNewFingerprint(e={}){return!!e[Z]}templateStatic(e,t){return typeof e=="number"?t[e]:e}toOutputBuffer(e,t,i){if(e[_t])return this.comprehensionToBuffer(e,t,i);let{[Z]:n}=e;n=this.templateStatic(n,t),i.buffer+=n[0];for(let s=1;s<n.length;s++)this.dynamicToBuffer(e[s-1],t,i),i.buffer+=n[s]}comprehensionToBuffer(e,t,i){let{[_t]:n,[Z]:s}=e;s=this.templateStatic(s,t);let r=t||e[Pi];for(let a=0;a<n.length;a++){let o=n[a];i.buffer+=s[0];for(let l=1;l<s.length;l++)this.dynamicToBuffer(o[l-1],r,i),i.buffer+=s[l]}}dynamicToBuffer(e,t,i){typeof e=="number"?i.buffer+=this.recursiveCIDToString(i.components,e,i.onlyCids):ke(e)?this.toOutputBuffer(e,t,i):i.buffer+=e}recursiveCIDToString(e,t,i){let n=e[t]||$(`no component for CID ${t}`,e),s=document.createElement("template");s.innerHTML=this.recursiveToString(n,e,i);let r=s.content,a=i&&!i.has(t),[o,l]=Array.from(r.childNodes).reduce(([c,p],v,g)=>v.nodeType===Node.ELEMENT_NODE?v.getAttribute(X)?[c,!0]:(v.setAttribute(X,t),v.id||(v.id=`${this.parentViewId()}-${t}-${g}`),a&&(v.setAttribute(rt,""),v.innerHTML=""),[!0,p]):v.nodeValue.trim()!==""?($(`only HTML element tags are allowed at the root of components.

got: "${v.nodeValue.trim()}"

within:
`,s.innerHTML.trim()),v.replaceWith(this.createSpan(v.nodeValue,t)),[!0,p]):(v.remove(),[c,p]),[!1,!1]);return!o&&!l?($(`expected at least one HTML element tag inside a component, but the component is empty:
`,s.innerHTML.trim()),this.createSpan("",t).outerHTML):(!o&&l&&$("expected at least one HTML element tag directly inside a component, but only subcomponents were found. A component must render at least one HTML tag directly inside itself.",s.innerHTML.trim()),s.innerHTML)}createSpan(e,t){let i=document.createElement("span");return i.innerText=e,i.setAttribute(X,t),i}},Qi=1,Ae=class{static makeID(){return Qi++}static elementID(e){return e.phxHookId}constructor(e,t,i){this.__view=e,this.liveSocket=e.liveSocket,this.__callbacks=i,this.__listeners=new Set,this.__isDisconnected=!1,this.el=t,this.el.phxHookId=this.constructor.makeID();for(let n in this.__callbacks)this[n]=this.__callbacks[n]}__mounted(){this.mounted&&this.mounted()}__updated(){this.updated&&this.updated()}__beforeUpdate(){this.beforeUpdate&&this.beforeUpdate()}__destroyed(){this.destroyed&&this.destroyed()}__reconnected(){this.__isDisconnected&&(this.__isDisconnected=!1,this.reconnected&&this.reconnected())}__disconnected(){this.__isDisconnected=!0,this.disconnected&&this.disconnected()}pushEvent(e,t={},i=function(){}){return this.__view.pushHookEvent(null,e,t,i)}pushEventTo(e,t,i={},n=function(){}){return this.__view.withinTargets(e,(s,r)=>s.pushHookEvent(r,t,i,n))}handleEvent(e,t){let i=(n,s)=>s?e:t(n.detail);return window.addEventListener(`phx:${e}`,i),this.__listeners.add(i),i}removeHandleEvent(e){let t=e(null,!0);window.removeEventListener(`phx:${t}`,e),this.__listeners.delete(e)}upload(e,t){return this.__view.dispatchUploads(e,t)}uploadTo(e,t,i){return this.__view.withinTargets(e,n=>n.dispatchUploads(t,i))}__cleanup__(){this.__listeners.forEach(e=>this.removeHandleEvent(e))}},en={exec(e,t,i,n,s){let[r,a]=s||[null,{}];(t.charAt(0)==="["?JSON.parse(t):[[r,a]]).forEach(([l,c])=>{l===r&&a.data&&(c.data=Object.assign(c.data||{},a.data)),this.filterToEls(n,c).forEach(p=>{this[`exec_${l}`](e,t,i,n,p,c)})})},isVisible(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length>0)},exec_dispatch(e,t,i,n,s,{to:r,event:a,detail:o,bubbles:l}){o=o||{},o.dispatcher=n,m.dispatchEvent(s,a,{detail:o,bubbles:l})},exec_push(e,t,i,n,s,r){if(!i.isConnected())return;let{event:a,data:o,target:l,page_loading:c,loading:p,value:v,dispatcher:g}=r,d={loading:p,value:v,target:l,page_loading:!!c},u=e==="change"&&g?g:n,f=l||u.getAttribute(i.binding("target"))||u;i.withinTargets(f,(b,y)=>{if(e==="change"){let{newCid:A,_target:h,callback:k}=r;h=h||(n instanceof HTMLInputElement?n.name:void 0),h&&(d._target=h),b.pushInput(n,y,A,a||t,d,k)}else e==="submit"?b.submitForm(n,y,a||t,d):b.pushEvent(e,n,y,a||t,o,d)})},exec_add_class(e,t,i,n,s,{names:r,transition:a,time:o}){this.addOrRemoveClasses(s,r,[],a,o,i)},exec_remove_class(e,t,i,n,s,{names:r,transition:a,time:o}){this.addOrRemoveClasses(s,[],r,a,o,i)},exec_transition(e,t,i,n,s,{time:r,transition:a}){let[o,l,c]=a,p=()=>this.addOrRemoveClasses(s,o.concat(l),[]),v=()=>this.addOrRemoveClasses(s,c,o.concat(l));i.transition(r,p,v)},exec_toggle(e,t,i,n,s,{display:r,ins:a,outs:o,time:l}){this.toggle(e,i,s,r,a,o,l)},exec_show(e,t,i,n,s,{display:r,transition:a,time:o}){this.show(e,i,s,r,a,o)},exec_hide(e,t,i,n,s,{display:r,transition:a,time:o}){this.hide(e,i,s,r,a,o)},exec_set_attr(e,t,i,n,s,{attr:[r,a]}){this.setOrRemoveAttrs(s,[[r,a]],[])},exec_remove_attr(e,t,i,n,s,{attr:r}){this.setOrRemoveAttrs(s,[],[r])},show(e,t,i,n,s,r){this.isVisible(i)||this.toggle(e,t,i,n,s,null,r)},hide(e,t,i,n,s,r){this.isVisible(i)&&this.toggle(e,t,i,n,null,s,r)},toggle(e,t,i,n,s,r,a){let[o,l,c]=s||[[],[],[]],[p,v,g]=r||[[],[],[]];if(o.length>0||p.length>0)if(this.isVisible(i)){let d=()=>{this.addOrRemoveClasses(i,v,o.concat(l).concat(c)),window.requestAnimationFrame(()=>{this.addOrRemoveClasses(i,p,[]),window.requestAnimationFrame(()=>this.addOrRemoveClasses(i,g,v))})};i.dispatchEvent(new Event("phx:hide-start")),t.transition(a,d,()=>{this.addOrRemoveClasses(i,[],p.concat(g)),m.putSticky(i,"toggle",u=>u.style.display="none"),i.dispatchEvent(new Event("phx:hide-end"))})}else{if(e==="remove")return;let d=()=>{this.addOrRemoveClasses(i,l,p.concat(v).concat(g)),m.putSticky(i,"toggle",u=>u.style.display=n||"block"),window.requestAnimationFrame(()=>{this.addOrRemoveClasses(i,o,[]),window.requestAnimationFrame(()=>this.addOrRemoveClasses(i,c,l))})};i.dispatchEvent(new Event("phx:show-start")),t.transition(a,d,()=>{this.addOrRemoveClasses(i,[],o.concat(c)),i.dispatchEvent(new Event("phx:show-end"))})}else this.isVisible(i)?window.requestAnimationFrame(()=>{i.dispatchEvent(new Event("phx:hide-start")),m.putSticky(i,"toggle",d=>d.style.display="none"),i.dispatchEvent(new Event("phx:hide-end"))}):window.requestAnimationFrame(()=>{i.dispatchEvent(new Event("phx:show-start")),m.putSticky(i,"toggle",d=>d.style.display=n||"block"),i.dispatchEvent(new Event("phx:show-end"))})},addOrRemoveClasses(e,t,i,n,s,r){let[a,o,l]=n||[[],[],[]];if(a.length>0){let c=()=>this.addOrRemoveClasses(e,o.concat(a),[]),p=()=>this.addOrRemoveClasses(e,t.concat(l),i.concat(a).concat(o));return r.transition(s,c,p)}window.requestAnimationFrame(()=>{let[c,p]=m.getSticky(e,"classes",[[],[]]),v=t.filter(f=>c.indexOf(f)<0&&!e.classList.contains(f)),g=i.filter(f=>p.indexOf(f)<0&&e.classList.contains(f)),d=c.filter(f=>i.indexOf(f)<0).concat(v),u=p.filter(f=>t.indexOf(f)<0).concat(g);m.putSticky(e,"classes",f=>(f.classList.remove(...u),f.classList.add(...d),[d,u]))})},setOrRemoveAttrs(e,t,i){let[n,s]=m.getSticky(e,"attrs",[[],[]]),r=t.map(([l,c])=>l).concat(i),a=n.filter(([l,c])=>!r.includes(l)).concat(t),o=s.filter(l=>!r.includes(l)).concat(i);m.putSticky(e,"attrs",l=>(o.forEach(c=>l.removeAttribute(c)),a.forEach(([c,p])=>l.setAttribute(c,p)),[a,o]))},hasAllClasses(e,t){return t.every(i=>e.classList.contains(i))},isToggledOut(e,t){return!this.isVisible(e)||this.hasAllClasses(e,t)},filterToEls(e,{to:t}){return t?m.all(document,t):[e]}},Q=en,Me=(e,t,i=[])=>{let n=new FormData(e),s=[];n.forEach((a,o,l)=>{a instanceof File&&s.push(o)}),s.forEach(a=>n.delete(a));let r=new URLSearchParams;for(let[a,o]of n.entries())(i.length===0||i.indexOf(a)>=0)&&r.append(a,o);for(let a in t)r.append(a,t[a]);return r.toString()},zt=class{constructor(e,t,i,n){this.liveSocket=t,this.flash=n,this.parent=i,this.root=i?i.root:this,this.el=e,this.id=this.el.id,this.ref=0,this.childJoins=0,this.loaderTimer=null,this.pendingDiffs=[],this.pruningCIDs=[],this.redirect=!1,this.href=null,this.joinCount=this.parent?this.parent.joinCount-1:0,this.joinPending=!0,this.destroyed=!1,this.joinCallback=function(s){s&&s()},this.stopCallback=function(){},this.pendingJoinOps=this.parent?null:[],this.viewHooks={},this.uploaders={},this.formSubmits=[],this.children=this.parent?null:{},this.root.children[this.id]={},this.channel=this.liveSocket.channel(`lv:${this.id}`,()=>({redirect:this.redirect?this.href:void 0,url:this.redirect?void 0:this.href||void 0,params:this.connectParams(),session:this.getSession(),static:this.getStatic(),flash:this.flash})),this.showLoader(this.liveSocket.loaderTimeout),this.bindChannel()}setHref(e){this.href=e}setRedirect(e){this.redirect=!0,this.href=e}isMain(){return this.el.getAttribute(dt)!==null}connectParams(){let e=this.liveSocket.params(this.el),t=m.all(document,`[${this.binding(gi)}]`).map(i=>i.src||i.href).filter(i=>typeof i=="string");return t.length>0&&(e._track_static=t),e._mounts=this.joinCount,e}isConnected(){return this.channel.canPush()}getSession(){return this.el.getAttribute(ae)}getStatic(){let e=this.el.getAttribute(Ee);return e===""?null:e}destroy(e=function(){}){this.destroyAllChildren(),this.destroyed=!0,delete this.root.children[this.id],this.parent&&delete this.root.children[this.parent.id][this.id],clearTimeout(this.loaderTimer);let t=()=>{e();for(let i in this.viewHooks)this.destroyHook(this.viewHooks[i])};m.markPhxChildDestroyed(this.el),this.log("destroyed",()=>["the child has been removed from the parent"]),this.channel.leave().receive("ok",t).receive("error",t).receive("timeout",t)}setContainerClasses(...e){this.el.classList.remove(wt,Ge,St),this.el.classList.add(...e)}showLoader(e){if(clearTimeout(this.loaderTimer),e)this.loaderTimer=setTimeout(()=>this.showLoader(),e);else{for(let t in this.viewHooks)this.viewHooks[t].__disconnected();this.setContainerClasses(Ge)}}hideLoader(){clearTimeout(this.loaderTimer),this.setContainerClasses(wt)}triggerReconnected(){for(let e in this.viewHooks)this.viewHooks[e].__reconnected()}log(e,t){this.liveSocket.log(this,e,t)}transition(e,t,i=function(){}){this.liveSocket.transition(e,t,i)}withinTargets(e,t){if(e instanceof HTMLElement||e instanceof SVGElement)return this.liveSocket.owner(e,i=>t(i,e));if(re(e))m.findComponentNodeList(this.el,e).length===0?$(`no component found matching phx-target of ${e}`):t(this,parseInt(e));else{let i=Array.from(document.querySelectorAll(e));i.length===0&&$(`nothing found matching the phx-target selector "${e}"`),i.forEach(n=>this.liveSocket.owner(n,s=>t(s,n)))}}applyDiff(e,t,i){this.log(e,()=>["",je(t)]);let{diff:n,reply:s,events:r,title:a}=Nt.extract(t);return a&&m.putTitle(a),i({diff:n,reply:s,events:r}),s}onJoin(e){let{rendered:t,container:i}=e;if(i){let[n,s]=i;this.el=m.replaceRootContainer(this.el,n,s)}this.childJoins=0,this.joinPending=!0,this.flash=null,se.dropLocal(this.liveSocket.localStorage,window.location.pathname,Ht),this.applyDiff("mount",t,({diff:n,events:s})=>{this.rendered=new Nt(this.id,n);let r=this.renderContainer(null,"join");this.dropPendingRefs();let a=this.formsForRecovery(r);this.joinCount++,a.length>0?a.forEach(([o,l,c],p)=>{this.pushFormRecovery(o,c,v=>{p===a.length-1&&this.onJoinComplete(v,r,s)})}):this.onJoinComplete(e,r,s)})}dropPendingRefs(){m.all(document,`[${he}="${this.id}"][${ee}]`,e=>{e.removeAttribute(ee),e.removeAttribute(he)})}onJoinComplete({live_patch:e},t,i){if(this.joinCount>1||this.parent&&!this.parent.isJoinPending())return this.applyJoinPatch(e,t,i);m.findPhxChildrenInFragment(t,this.id).filter(s=>{let r=s.id&&this.el.querySelector(`[id="${s.id}"]`),a=r&&r.getAttribute(Ee);return a&&s.setAttribute(Ee,a),this.joinChild(s)}).length===0?this.parent?(this.root.pendingJoinOps.push([this,()=>this.applyJoinPatch(e,t,i)]),this.parent.ackJoin(this)):(this.onAllChildJoinsComplete(),this.applyJoinPatch(e,t,i)):this.root.pendingJoinOps.push([this,()=>this.applyJoinPatch(e,t,i)])}attachTrueDocEl(){this.el=m.byId(this.id),this.el.setAttribute(_e,this.root.id)}applyJoinPatch(e,t,i){this.attachTrueDocEl();let n=new $e(this,this.el,this.id,t,null);if(n.markPrunableContentForRemoval(),this.performPatch(n,!1),this.joinNewChildren(),m.all(this.el,`[${this.binding(ye)}], [data-phx-${ye}]`,s=>{let r=this.addHook(s);r&&r.__mounted()}),this.joinPending=!1,this.liveSocket.dispatchEvents(i),this.applyPendingUpdates(),e){let{kind:s,to:r}=e;this.liveSocket.historyPatch(r,s)}this.hideLoader(),this.joinCount>1&&this.triggerReconnected(),this.stopCallback()}triggerBeforeUpdateHook(e,t){this.liveSocket.triggerDOM("onBeforeElUpdated",[e,t]);let i=this.getHook(e),n=i&&m.isIgnored(e,this.binding(lt));if(i&&!e.isEqualNode(t)&&!(n&&Di(e.dataset,t.dataset)))return i.__beforeUpdate(),i}performPatch(e,t){let i=[],n=!1,s=new Set;return e.after("added",r=>{this.liveSocket.triggerDOM("onNodeAdded",[r]);let a=this.addHook(r);a&&a.__mounted()}),e.after("phxChildAdded",r=>{m.isPhxSticky(r)?this.liveSocket.joinRootViews():n=!0}),e.before("updated",(r,a)=>{this.triggerBeforeUpdateHook(r,a)&&s.add(r.id)}),e.after("updated",r=>{s.has(r.id)&&this.getHook(r).__updated()}),e.after("discarded",r=>{r.nodeType===Node.ELEMENT_NODE&&i.push(r)}),e.after("transitionsDiscarded",r=>this.afterElementsRemoved(r,t)),e.perform(),this.afterElementsRemoved(i,t),n}afterElementsRemoved(e,t){let i=[];e.forEach(n=>{let s=m.all(n,`[${X}]`),r=m.all(n,`[${this.binding(ye)}]`);s.concat(n).forEach(a=>{let o=this.componentID(a);re(o)&&i.indexOf(o)===-1&&i.push(o)}),r.concat(n).forEach(a=>{let o=this.getHook(a);o&&this.destroyHook(o)})}),t&&this.maybePushComponentsDestroyed(i)}joinNewChildren(){m.findPhxChildren(this.el,this.id).forEach(e=>this.joinChild(e))}getChildById(e){return this.root.children[this.id][e]}getDescendentByEl(e){return e.id===this.id?this:this.children[e.getAttribute(ue)][e.id]}destroyDescendent(e){for(let t in this.root.children)for(let i in this.root.children[t])if(i===e)return this.root.children[t][i].destroy()}joinChild(e){if(!this.getChildById(e.id)){let i=new zt(e,this.liveSocket,this);return this.root.children[this.id][i.id]=i,i.join(),this.childJoins++,!0}}isJoinPending(){return this.joinPending}ackJoin(e){this.childJoins--,this.childJoins===0&&(this.parent?this.parent.ackJoin(this):this.onAllChildJoinsComplete())}onAllChildJoinsComplete(){this.joinCallback(()=>{this.pendingJoinOps.forEach(([e,t])=>{e.isDestroyed()||t()}),this.pendingJoinOps=[]})}update(e,t){if(this.isJoinPending()||this.liveSocket.hasPendingLink()&&!m.isPhxSticky(this.el))return this.pendingDiffs.push({diff:e,events:t});this.rendered.mergeDiff(e);let i=!1;this.rendered.isComponentOnlyDiff(e)?this.liveSocket.time("component patch complete",()=>{m.findParentCIDs(this.el,this.rendered.componentCIDs(e)).forEach(s=>{this.componentPatch(this.rendered.getComponent(e,s),s)&&(i=!0)})}):Lt(e)||this.liveSocket.time("full patch complete",()=>{let n=this.renderContainer(e,"update"),s=new $e(this,this.el,this.id,n,null);i=this.performPatch(s,!0)}),this.liveSocket.dispatchEvents(t),i&&this.joinNewChildren()}renderContainer(e,t){return this.liveSocket.time(`toString diff (${t})`,()=>{let i=this.el.tagName,n=e?this.rendered.componentCIDs(e).concat(this.pruningCIDs):null,s=this.rendered.toString(n);return`<${i}>${s}</${i}>`})}componentPatch(e,t){if(Lt(e))return!1;let i=this.rendered.componentToString(t),n=new $e(this,this.el,this.id,i,t);return this.performPatch(n,!0)}getHook(e){return this.viewHooks[Ae.elementID(e)]}addHook(e){if(Ae.elementID(e)||!e.getAttribute)return;let t=e.getAttribute(`data-phx-${ye}`)||e.getAttribute(this.binding(ye));if(t&&!this.ownsElement(e))return;let i=this.liveSocket.getHookCallbacks(t);if(i){e.id||$(`no DOM ID for hook "${t}". Hooks require a unique ID on each element.`,e);let n=new Ae(this,e,i);return this.viewHooks[Ae.elementID(n.el)]=n,n}else t!==null&&$(`unknown hook found for "${t}"`,e)}destroyHook(e){e.__destroyed(),e.__cleanup__(),delete this.viewHooks[Ae.elementID(e.el)]}applyPendingUpdates(){this.pendingDiffs.forEach(({diff:e,events:t})=>this.update(e,t)),this.pendingDiffs=[]}onChannel(e,t){this.liveSocket.onChannel(this.channel,e,i=>{this.isJoinPending()?this.root.pendingJoinOps.push([this,()=>t(i)]):this.liveSocket.requestDOMUpdate(()=>t(i))})}bindChannel(){this.liveSocket.onChannel(this.channel,"diff",e=>{this.liveSocket.requestDOMUpdate(()=>{this.applyDiff("update",e,({diff:t,events:i})=>this.update(t,i))})}),this.onChannel("redirect",({to:e,flash:t})=>this.onRedirect({to:e,flash:t})),this.onChannel("live_patch",e=>this.onLivePatch(e)),this.onChannel("live_redirect",e=>this.onLiveRedirect(e)),this.channel.onError(e=>this.onError(e)),this.channel.onClose(e=>this.onClose(e))}destroyAllChildren(){for(let e in this.root.children[this.id])this.getChildById(e).destroy()}onLiveRedirect(e){let{to:t,kind:i,flash:n}=e,s=this.expandURL(t);this.liveSocket.historyRedirect(s,i,n)}onLivePatch(e){let{to:t,kind:i}=e;this.href=this.expandURL(t),this.liveSocket.historyPatch(t,i)}expandURL(e){return e.startsWith("/")?`${window.location.protocol}//${window.location.host}${e}`:e}onRedirect({to:e,flash:t}){this.liveSocket.redirect(e,t)}isDestroyed(){return this.destroyed}join(e){this.isMain()&&(this.stopCallback=this.liveSocket.withPageLoading({to:this.href,kind:"initial"})),this.joinCallback=t=>{t=t||function(){},e?e(this.joinCount,t):t()},this.liveSocket.wrapPush(this,{timeout:!1},()=>this.channel.join().receive("ok",t=>{this.isDestroyed()||this.liveSocket.requestDOMUpdate(()=>this.onJoin(t))}).receive("error",t=>!this.isDestroyed()&&this.onJoinError(t)).receive("timeout",()=>!this.isDestroyed()&&this.onJoinError({reason:"timeout"})))}onJoinError(e){if(e.reason==="unauthorized"||e.reason==="stale")return this.log("error",()=>["unauthorized live_redirect. Falling back to page request",e]),this.onRedirect({to:this.href});if((e.redirect||e.live_redirect)&&(this.joinPending=!1,this.channel.leave()),e.redirect)return this.onRedirect(e.redirect);if(e.live_redirect)return this.onLiveRedirect(e.live_redirect);this.log("error",()=>["unable to join",e]),this.liveSocket.isConnected()&&this.liveSocket.reloadWithJitter(this)}onClose(e){if(!this.isDestroyed()){if(this.liveSocket.hasPendingLink()&&e!=="leave")return this.liveSocket.reloadWithJitter(this);this.destroyAllChildren(),this.liveSocket.dropActiveElement(this),document.activeElement&&document.activeElement.blur(),this.liveSocket.isUnloaded()&&this.showLoader(Ci)}}onError(e){this.onClose(e),this.liveSocket.isConnected()&&this.log("error",()=>["view crashed",e]),this.liveSocket.isUnloaded()||this.displayError()}displayError(){this.isMain()&&m.dispatchEvent(window,"phx:page-loading-start",{detail:{to:this.href,kind:"error"}}),this.showLoader(),this.setContainerClasses(Ge,St)}pushWithReply(e,t,i,n=function(){}){if(!this.isConnected())return;let[s,[r],a]=e?e():[null,[],{}],o=function(){};return(a.page_loading||r&&r.getAttribute(this.binding(yt))!==null)&&(o=this.liveSocket.withPageLoading({kind:"element",target:r})),typeof i.cid!="number"&&delete i.cid,this.liveSocket.wrapPush(this,{timeout:!0},()=>this.channel.push(t,i,Ti).receive("ok",l=>{s!==null&&this.undoRefs(s);let c=p=>{l.redirect&&this.onRedirect(l.redirect),l.live_patch&&this.onLivePatch(l.live_patch),l.live_redirect&&this.onLiveRedirect(l.live_redirect),o(),n(l,p)};l.diff?this.liveSocket.requestDOMUpdate(()=>{let p=this.applyDiff("update",l.diff,({diff:v,events:g})=>{this.update(v,g)});c(p)}):c(null)}))}undoRefs(e){m.all(document,`[${he}="${this.id}"][${ee}="${e}"]`,t=>{let i=t.getAttribute(Ie);t.removeAttribute(ee),t.removeAttribute(he),t.getAttribute(Ye)!==null&&(t.readOnly=!1,t.removeAttribute(Ye)),i!==null&&(t.disabled=i==="true",t.removeAttribute(Ie)),$t.forEach(r=>m.removeClass(t,r));let n=t.getAttribute(De);n!==null&&(t.innerText=n,t.removeAttribute(De));let s=m.private(t,ee);if(s){let r=this.triggerBeforeUpdateHook(t,s);$e.patchEl(t,s,this.liveSocket.getActiveElement()),r&&r.__updated(),m.deletePrivate(t,ee)}})}putRef(e,t,i={}){let n=this.ref++,s=this.binding(ot);return i.loading&&(e=e.concat(m.all(document,i.loading))),e.forEach(r=>{r.classList.add(`phx-${t}-loading`),r.setAttribute(ee,n),r.setAttribute(he,this.el.id);let a=r.getAttribute(s);a!==null&&(r.getAttribute(De)||r.setAttribute(De,r.innerText),a!==""&&(r.innerText=a),r.setAttribute("disabled",""))}),[n,e,i]}componentID(e){let t=e.getAttribute&&e.getAttribute(X);return t?parseInt(t):null}targetComponentID(e,t,i={}){if(re(t))return t;let n=e.getAttribute(this.binding("target"));return re(n)?parseInt(n):t&&(n!==null||i.target)?this.closestComponentID(t):null}closestComponentID(e){return re(e)?e:e?ne(e.closest(`[${X}]`),t=>this.ownsElement(t)&&this.componentID(t)):null}pushHookEvent(e,t,i,n){if(!this.isConnected())return this.log("hook",()=>["unable to push hook event. LiveView not connected",t,i]),!1;let[s,r,a]=this.putRef([],"hook");return this.pushWithReply(()=>[s,r,a],"event",{type:"hook",event:t,value:i,cid:this.closestComponentID(e)},(o,l)=>n(l,s)),s}extractMeta(e,t,i){let n=this.binding("value-");for(let s=0;s<e.attributes.length;s++){t||(t={});let r=e.attributes[s].name;r.startsWith(n)&&(t[r.replace(n,"")]=e.getAttribute(r))}if(e.value!==void 0&&(t||(t={}),t.value=e.value,e.tagName==="INPUT"&&Ut.indexOf(e.type)>=0&&!e.checked&&delete t.value),i){t||(t={});for(let s in i)t[s]=i[s]}return t}pushEvent(e,t,i,n,s,r={}){this.pushWithReply(()=>this.putRef([t],e,r),"event",{type:e,event:n,value:this.extractMeta(t,s,r.value),cid:this.targetComponentID(t,i,r)})}pushFileProgress(e,t,i,n=function(){}){this.liveSocket.withinOwners(e.form,(s,r)=>{s.pushWithReply(null,"progress",{event:e.getAttribute(s.binding(Ai)),ref:e.getAttribute(de),entry_ref:t,progress:i,cid:s.targetComponentID(e.form,r)},n)})}pushInput(e,t,i,n,s,r){let a,o=re(i)?i:this.targetComponentID(e.form,t),l=()=>this.putRef([e,e.form],"change",s),c;e.getAttribute(this.binding("change"))?c=Me(e.form,{_target:s._target},[e.name]):c=Me(e.form,{_target:s._target}),m.isUploadInput(e)&&e.files&&e.files.length>0&&H.trackFiles(e,Array.from(e.files)),a=H.serializeUploads(e);let p={type:"form",event:n,value:c,uploads:a,cid:o};this.pushWithReply(l,"event",p,v=>{if(m.showError(e,this.liveSocket.binding(at)),m.isUploadInput(e)&&e.getAttribute("data-phx-auto-upload")!==null){if(H.filesAwaitingPreflight(e).length>0){let[g,d]=l();this.uploadFiles(e.form,t,g,o,u=>{r&&r(v),this.triggerAwaitingSubmit(e.form)})}}else r&&r(v)})}triggerAwaitingSubmit(e){let t=this.getScheduledSubmit(e);if(t){let[i,n,s,r]=t;this.cancelSubmit(e),r()}}getScheduledSubmit(e){return this.formSubmits.find(([t,i,n,s])=>t.isSameNode(e))}scheduleSubmit(e,t,i,n){if(this.getScheduledSubmit(e))return!0;this.formSubmits.push([e,t,i,n])}cancelSubmit(e){this.formSubmits=this.formSubmits.filter(([t,i,n])=>t.isSameNode(e)?(this.undoRefs(i),!1):!0)}pushFormSubmit(e,t,i,n,s){let r=v=>!(Ce(v,`${this.binding(lt)}=ignore`,v.form)||Ce(v,"data-phx-update=ignore",v.form)),a=v=>v.hasAttribute(this.binding(ot)),o=v=>v.tagName=="BUTTON",l=v=>["INPUT","TEXTAREA","SELECT"].includes(v.tagName),c=()=>{let v=Array.from(e.elements),g=v.filter(a),d=v.filter(o).filter(r),u=v.filter(l).filter(r);return d.forEach(f=>{f.setAttribute(Ie,f.disabled),f.disabled=!0}),u.forEach(f=>{f.setAttribute(Ye,f.readOnly),f.readOnly=!0,f.files&&(f.setAttribute(Ie,f.disabled),f.disabled=!0)}),e.setAttribute(this.binding(yt),""),this.putRef([e].concat(g).concat(d).concat(u),"submit",n)},p=this.targetComponentID(e,t);if(H.hasUploadsInProgress(e)){let[v,g]=c(),d=()=>this.pushFormSubmit(e,t,i,n,s);return this.scheduleSubmit(e,v,n,d)}else if(H.inputsAwaitingPreflight(e).length>0){let[v,g]=c(),d=()=>[v,g,n];this.uploadFiles(e,t,v,p,u=>{let f=Me(e,{});this.pushWithReply(d,"event",{type:"form",event:i,value:f,cid:p},s)})}else{let v=Me(e,{});this.pushWithReply(c,"event",{type:"form",event:i,value:v,cid:p},s)}}uploadFiles(e,t,i,n,s){let r=this.joinCount,a=H.activeFileInputs(e),o=a.length;a.forEach(l=>{let c=new H(l,this,()=>{o--,o===0&&s()});this.uploaders[l]=c;let p=c.entries().map(g=>g.toPreflightPayload()),v={ref:l.getAttribute(de),entries:p,cid:this.targetComponentID(l.form,t)};this.log("upload",()=>["sending preflight request",v]),this.pushWithReply(null,"allow_upload",v,g=>{if(this.log("upload",()=>["got preflight response",g]),g.error){this.undoRefs(i);let[d,u]=g.error;this.log("upload",()=>[`error for entry ${d}`,u])}else{let d=u=>{this.channel.onError(()=>{this.joinCount===r&&u()})};c.initAdapterUpload(g,d,this.liveSocket)}})})}dispatchUploads(e,t){let i=m.findUploadInputs(this.el).filter(n=>n.name===e);i.length===0?$(`no live file inputs found matching the name "${e}"`):i.length>1?$(`duplicate live file inputs found matching the name "${e}"`):m.dispatchEvent(i[0],Mt,{detail:{files:t}})}pushFormRecovery(e,t,i){this.liveSocket.withinOwners(e,(n,s)=>{let r=e.elements[0],a=e.getAttribute(this.binding(Et))||e.getAttribute(this.binding("change"));Q.exec("change",a,n,r,["push",{_target:r.name,newCid:t,callback:i}])})}pushLinkPatch(e,t,i){let n=this.liveSocket.setPendingLink(e),s=t?()=>this.putRef([t],"click"):null,r=()=>this.liveSocket.redirect(window.location.href),a=this.pushWithReply(s,"live_patch",{url:e},o=>{this.liveSocket.requestDOMUpdate(()=>{o.link_redirect?this.liveSocket.replaceMain(e,null,i,n):(this.liveSocket.commitPendingLink(n)&&(this.href=e),this.applyPendingUpdates(),i&&i(n))})});a?a.receive("timeout",r):r()}formsForRecovery(e){if(this.joinCount===0)return[];let t=this.binding("change"),i=document.createElement("template");return i.innerHTML=e,m.all(this.el,`form[${t}]`).filter(n=>n.id&&this.ownsElement(n)).filter(n=>n.elements.length>0).filter(n=>n.getAttribute(this.binding(Et))!=="ignore").map(n=>{let s=i.content.querySelector(`form[id="${n.id}"][${t}="${n.getAttribute(t)}"]`);return s?[n,s,this.targetComponentID(s)]:[n,null,null]}).filter(([n,s,r])=>s)}maybePushComponentsDestroyed(e){let t=e.filter(i=>m.findComponentNodeList(this.el,i).length===0);t.length>0&&(this.pruningCIDs.push(...t),this.pushWithReply(null,"cids_will_destroy",{cids:t},()=>{this.pruningCIDs=this.pruningCIDs.filter(n=>t.indexOf(n)!==-1);let i=t.filter(n=>m.findComponentNodeList(this.el,n).length===0);i.length>0&&this.pushWithReply(null,"cids_destroyed",{cids:i},n=>{this.rendered.pruneCIDs(n.cids)})}))}ownsElement(e){return e.getAttribute(ue)===this.id||ne(e.closest(fe),t=>t.id)===this.id}submitForm(e,t,i,n={}){m.putPrivate(e,Bt,!0);let s=this.liveSocket.binding(at),r=Array.from(e.elements);this.liveSocket.blurActiveElement(this),this.pushFormSubmit(e,t,i,n,()=>{r.forEach(a=>m.showError(a,s)),this.liveSocket.restorePreviouslyActiveFocus()})}binding(e){return this.liveSocket.binding(e)}},Vt=class{constructor(e,t,i={}){if(this.unloaded=!1,!t||t.constructor.name==="Object")throw new Error(`
      a phoenix Socket must be provided as the second argument to the LiveSocket constructor. For example:

          import {Socket} from "phoenix"
          import {LiveSocket} from "phoenix_live_view"
          let liveSocket = new LiveSocket("/live", Socket, {...})
      `);this.socket=new t(e,i),this.bindingPrefix=i.bindingPrefix||_i,this.opts=i,this.params=et(i.params||{}),this.viewLogger=i.viewLogger,this.metadataCallbacks=i.metadata||{},this.defaults=Object.assign(je(xi),i.defaults||{}),this.activeElement=null,this.prevActive=null,this.silenced=!1,this.main=null,this.outgoingMainEl=null,this.clickStartedAtTarget=null,this.linkRef=1,this.roots={},this.href=window.location.href,this.pendingLink=null,this.currentLocation=je(window.location),this.hooks=i.hooks||{},this.uploaders=i.uploaders||{},this.loaderTimeout=i.loaderTimeout||Ei,this.reloadWithJitterTimer=null,this.maxReloads=i.maxReloads||ci,this.reloadJitterMin=i.reloadJitterMin||ui,this.reloadJitterMax=i.reloadJitterMax||fi,this.failsafeJitter=i.failsafeJitter||pi,this.localStorage=i.localStorage||window.localStorage,this.sessionStorage=i.sessionStorage||window.sessionStorage,this.boundTopLevelEvents=!1,this.domCallbacks=Object.assign({onNodeAdded:et(),onBeforeElUpdated:et()},i.dom||{}),this.transitions=new tn,window.addEventListener("pagehide",n=>{this.unloaded=!0}),this.socket.onOpen(()=>{this.isUnloaded()&&window.location.reload()})}isProfileEnabled(){return this.sessionStorage.getItem(Ze)==="true"}isDebugEnabled(){return this.sessionStorage.getItem(Oe)==="true"}isDebugDisabled(){return this.sessionStorage.getItem(Oe)==="false"}enableDebug(){this.sessionStorage.setItem(Oe,"true")}enableProfiling(){this.sessionStorage.setItem(Ze,"true")}disableDebug(){this.sessionStorage.setItem(Oe,"false")}disableProfiling(){this.sessionStorage.removeItem(Ze)}enableLatencySim(e){this.enableDebug(),console.log("latency simulator enabled for the duration of this browser session. Call disableLatencySim() to disable"),this.sessionStorage.setItem(Qe,e)}disableLatencySim(){this.sessionStorage.removeItem(Qe)}getLatencySim(){let e=this.sessionStorage.getItem(Qe);return e?parseInt(e):null}getSocket(){return this.socket}connect(){window.location.hostname==="localhost"&&!this.isDebugDisabled()&&this.enableDebug();let e=()=>{this.joinRootViews()?(this.bindTopLevelEvents(),this.socket.connect()):this.main&&this.socket.connect()};["complete","loaded","interactive"].indexOf(document.readyState)>=0?e():document.addEventListener("DOMContentLoaded",()=>e())}disconnect(e){clearTimeout(this.reloadWithJitterTimer),this.socket.disconnect(e)}replaceTransport(e){clearTimeout(this.reloadWithJitterTimer),this.socket.replaceTransport(e),this.connect()}execJS(e,t,i=null){this.owner(e,n=>Q.exec(i,t,n,e))}triggerDOM(e,t){this.domCallbacks[e](...t)}time(e,t){if(!this.isProfileEnabled()||!console.time)return t();console.time(e);let i=t();return console.timeEnd(e),i}log(e,t,i){if(this.viewLogger){let[n,s]=i();this.viewLogger(e,t,n,s)}else if(this.isDebugEnabled()){let[n,s]=i();Ii(e,t,n,s)}}requestDOMUpdate(e){this.transitions.after(e)}transition(e,t,i=function(){}){this.transitions.addTransition(e,t,i)}onChannel(e,t,i){e.on(t,n=>{let s=this.getLatencySim();s?(console.log(`simulating ${s}ms of latency from server to client`),setTimeout(()=>i(n),s)):i(n)})}wrapPush(e,t,i){let n=this.getLatencySim(),s=e.joinCount;if(!n)return this.isConnected()&&t.timeout?i().receive("timeout",()=>{e.joinCount===s&&!e.isDestroyed()&&this.reloadWithJitter(e,()=>{this.log(e,"timeout",()=>["received timeout while communicating with server. Falling back to hard refresh for recovery"])})}):i();console.log(`simulating ${n}ms of latency from client to server`);let r={receives:[],receive(a,o){this.receives.push([a,o])}};return setTimeout(()=>{e.isDestroyed()||r.receives.reduce((a,[o,l])=>a.receive(o,l),i())},n),r}reloadWithJitter(e,t){clearTimeout(this.reloadWithJitterTimer),this.disconnect();let i=this.reloadJitterMin,n=this.reloadJitterMax,s=Math.floor(Math.random()*(n-i+1))+i,r=se.updateLocal(this.localStorage,window.location.pathname,Ht,0,a=>a+1);r>this.maxReloads&&(s=this.failsafeJitter),this.reloadWithJitterTimer=setTimeout(()=>{e.isDestroyed()||e.isConnected()||(e.destroy(),t?t():this.log(e,"join",()=>[`encountered ${r} consecutive reloads`]),r>this.maxReloads&&this.log(e,"join",()=>[`exceeded ${this.maxReloads} consecutive reloads. Entering failsafe mode`]),this.hasPendingLink()?window.location=this.pendingLink:window.location.reload())},s)}getHookCallbacks(e){return e&&e.startsWith("Phoenix.")?Hi[e.split(".")[1]]:this.hooks[e]}isUnloaded(){return this.unloaded}isConnected(){return this.socket.isConnected()}getBindingPrefix(){return this.bindingPrefix}binding(e){return`${this.getBindingPrefix()}${e}`}channel(e,t){return this.socket.channel(e,t)}joinRootViews(){let e=!1;return m.all(document,`${fe}:not([${ue}])`,t=>{if(!this.getRootById(t.id)){let i=this.newRootView(t);i.setHref(this.getHref()),i.join(),t.getAttribute(dt)&&(this.main=i)}e=!0}),e}redirect(e,t){this.disconnect(),se.redirect(e,t)}replaceMain(e,t,i=null,n=this.setPendingLink(e)){this.outgoingMainEl=this.outgoingMainEl||this.main.el;let s=m.cloneNode(this.outgoingMainEl,"");this.main.showLoader(this.loaderTimeout),this.main.destroy(),this.main=this.newRootView(s,t),this.main.setRedirect(e),this.transitionRemoves(),this.main.join((r,a)=>{r===1&&this.commitPendingLink(n)&&this.requestDOMUpdate(()=>{m.findPhxSticky(document).forEach(o=>s.appendChild(o)),this.outgoingMainEl.replaceWith(s),this.outgoingMainEl=null,i&&requestAnimationFrame(i),a()})})}transitionRemoves(e){let t=this.binding("remove");e=e||m.all(document,`[${t}]`),e.forEach(i=>{document.body.contains(i)&&this.execJS(i,i.getAttribute(t),"remove")})}isPhxView(e){return e.getAttribute&&e.getAttribute(ae)!==null}newRootView(e,t){let i=new zt(e,this,null,t);return this.roots[i.id]=i,i}owner(e,t){let i=ne(e.closest(fe),n=>this.getViewByEl(n))||this.main;i&&t(i)}withinOwners(e,t){this.owner(e,i=>t(i,e))}getViewByEl(e){let t=e.getAttribute(_e);return ne(this.getRootById(t),i=>i.getDescendentByEl(e))}getRootById(e){return this.roots[e]}destroyAllViews(){for(let e in this.roots)this.roots[e].destroy(),delete this.roots[e];this.main=null}destroyViewByEl(e){let t=this.getRootById(e.getAttribute(_e));t&&t.id===e.id?(t.destroy(),delete this.roots[t.id]):t&&t.destroyDescendent(e.id)}setActiveElement(e){if(this.activeElement===e)return;this.activeElement=e;let t=()=>{e===this.activeElement&&(this.activeElement=null),e.removeEventListener("mouseup",this),e.removeEventListener("touchend",this)};e.addEventListener("mouseup",t),e.addEventListener("touchend",t)}getActiveElement(){return document.activeElement===document.body?this.activeElement||document.activeElement:document.activeElement||document.body}dropActiveElement(e){this.prevActive&&e.ownsElement(this.prevActive)&&(this.prevActive=null)}restorePreviouslyActiveFocus(){this.prevActive&&this.prevActive!==document.body&&this.prevActive.focus()}blurActiveElement(){this.prevActive=this.getActiveElement(),this.prevActive!==document.body&&this.prevActive.blur()}bindTopLevelEvents(){this.boundTopLevelEvents||(this.boundTopLevelEvents=!0,this.socket.onClose(e=>{e&&e.code===1e3&&this.main&&this.reloadWithJitter(this.main)}),document.body.addEventListener("click",function(){}),window.addEventListener("pageshow",e=>{e.persisted&&(this.getSocket().disconnect(),this.withPageLoading({to:window.location.href,kind:"redirect"}),window.location.reload())},!0),this.bindNav(),this.bindClicks(),this.bindForms(),this.bind({keyup:"keyup",keydown:"keydown"},(e,t,i,n,s,r)=>{let a=n.getAttribute(this.binding(Si)),o=e.key&&e.key.toLowerCase();if(a&&a.toLowerCase()!==o)return;let l=ge({key:e.key},this.eventMeta(t,e,n));Q.exec(t,s,i,n,["push",{data:l}])}),this.bind({blur:"focusout",focus:"focusin"},(e,t,i,n,s,r)=>{if(!r){let a=ge({key:e.key},this.eventMeta(t,e,n));Q.exec(t,s,i,n,["push",{data:a}])}}),this.bind({blur:"blur",focus:"focus"},(e,t,i,n,s,r,a)=>{if(a==="window"){let o=this.eventMeta(t,e,n);Q.exec(t,r,i,n,["push",{data:o}])}}),window.addEventListener("dragover",e=>e.preventDefault()),window.addEventListener("drop",e=>{e.preventDefault();let t=ne(Ce(e.target,this.binding(vt)),s=>s.getAttribute(this.binding(vt))),i=t&&document.getElementById(t),n=Array.from(e.dataTransfer.files||[]);!i||i.disabled||n.length===0||!(i.files instanceof FileList)||(H.trackFiles(i,n),i.dispatchEvent(new Event("input",{bubbles:!0})))}),this.on(Mt,e=>{let t=e.target;if(!m.isUploadInput(t))return;let i=Array.from(e.detail.files||[]).filter(n=>n instanceof File||n instanceof Blob);H.trackFiles(t,i),t.dispatchEvent(new Event("input",{bubbles:!0}))}))}eventMeta(e,t,i){let n=this.metadataCallbacks[e];return n?n(t,i):{}}setPendingLink(e){return this.linkRef++,this.pendingLink=e,this.linkRef}commitPendingLink(e){return this.linkRef!==e?!1:(this.href=this.pendingLink,this.pendingLink=null,!0)}getHref(){return this.href}hasPendingLink(){return!!this.pendingLink}bind(e,t){for(let i in e){let n=e[i];this.on(n,s=>{let r=this.binding(i),a=this.binding(`window-${i}`),o=s.target.getAttribute&&s.target.getAttribute(r);o?this.debounce(s.target,s,n,()=>{this.withinOwners(s.target,l=>{t(s,i,l,s.target,o,null)})}):m.all(document,`[${a}]`,l=>{let c=l.getAttribute(a);this.debounce(l,s,n,()=>{this.withinOwners(l,p=>{t(s,i,p,l,c,"window")})})})})}}bindClicks(){window.addEventListener("mousedown",e=>this.clickStartedAtTarget=e.target),this.bindClick("click","click",!1),this.bindClick("mousedown","capture-click",!0)}bindClick(e,t,i){let n=this.binding(t);window.addEventListener(e,s=>{let r=null;if(i)r=s.target.matches(`[${n}]`)?s.target:s.target.querySelector(`[${n}]`);else{let o=this.clickStartedAtTarget||s.target;r=Ce(o,n),this.dispatchClickAway(s,o),this.clickStartedAtTarget=null}let a=r&&r.getAttribute(n);!a||(r.getAttribute("href")==="#"&&s.preventDefault(),this.debounce(r,s,"click",()=>{this.withinOwners(r,o=>{Q.exec("click",a,o,r,["push",{data:this.eventMeta("click",s,r)}])})}))},i)}dispatchClickAway(e,t){let i=this.binding("click-away");m.all(document,`[${i}]`,n=>{n.isSameNode(t)||n.contains(t)||this.withinOwners(e.target,s=>{let r=n.getAttribute(i);Q.isVisible(n)&&Q.exec("click",r,s,n,["push",{data:this.eventMeta("click",e,e.target)}])})})}bindNav(){if(!se.canPushState())return;history.scrollRestoration&&(history.scrollRestoration="manual");let e=null;window.addEventListener("scroll",t=>{clearTimeout(e),e=setTimeout(()=>{se.updateCurrentState(i=>Object.assign(i,{scroll:window.scrollY}))},100)}),window.addEventListener("popstate",t=>{if(!this.registerNewLocation(window.location))return;let{type:i,id:n,root:s,scroll:r}=t.state||{},a=window.location.href;this.requestDOMUpdate(()=>{this.main.isConnected()&&i==="patch"&&n===this.main.id?this.main.pushLinkPatch(a,null):this.replaceMain(a,null,()=>{s&&this.replaceRootHistory(),typeof r=="number"&&setTimeout(()=>{window.scrollTo(0,r)},0)})})},!1),window.addEventListener("click",t=>{let i=Ce(t.target,Ke),n=i&&i.getAttribute(Ke),s=t.metaKey||t.ctrlKey||t.button===1;if(!n||!this.isConnected()||!this.main||s)return;let r=i.href,a=i.getAttribute(mi);t.preventDefault(),t.stopImmediatePropagation(),this.pendingLink!==r&&this.requestDOMUpdate(()=>{if(n==="patch")this.pushHistoryPatch(r,a,i);else if(n==="redirect")this.historyRedirect(r,a);else throw new Error(`expected ${Ke} to be "patch" or "redirect", got: ${n}`)})},!1)}dispatchEvent(e,t={}){m.dispatchEvent(window,`phx:${e}`,{detail:t})}dispatchEvents(e){e.forEach(([t,i])=>this.dispatchEvent(t,i))}withPageLoading(e,t){m.dispatchEvent(window,"phx:page-loading-start",{detail:e});let i=()=>m.dispatchEvent(window,"phx:page-loading-stop",{detail:e});return t?t(i):i}pushHistoryPatch(e,t,i){this.withPageLoading({to:e,kind:"patch"},n=>{this.main.pushLinkPatch(e,i,s=>{this.historyPatch(e,t,s),n()})})}historyPatch(e,t,i=this.setPendingLink(e)){!this.commitPendingLink(i)||(se.pushState(t,{type:"patch",id:this.main.id},e),this.registerNewLocation(window.location))}historyRedirect(e,t,i){let n=window.scrollY;this.withPageLoading({to:e,kind:"redirect"},s=>{this.replaceMain(e,i,()=>{se.pushState(t,{type:"redirect",id:this.main.id,scroll:n},e),this.registerNewLocation(window.location),s()})})}replaceRootHistory(){se.pushState("replace",{root:!0,type:"patch",id:this.main.id})}registerNewLocation(e){let{pathname:t,search:i}=this.currentLocation;return t+i===e.pathname+e.search?!1:(this.currentLocation=je(e),!0)}bindForms(){let e=0;this.on("submit",t=>{let i=t.target.getAttribute(this.binding("submit"));!i||(t.preventDefault(),t.target.disabled=!0,this.withinOwners(t.target,n=>{Q.exec("submit",i,n,t.target,["push",{}])}))},!1);for(let t of["change","input"])this.on(t,i=>{let n=this.binding("change"),s=i.target,r=s.getAttribute(n),a=s.form&&s.form.getAttribute(n),o=r||a;if(!o||s.type==="number"&&s.validity&&s.validity.badInput)return;let l=r?s:s.form,c=e;e++;let{at:p,type:v}=m.private(s,"prev-iteration")||{};p===c-1&&t!==v||(m.putPrivate(s,"prev-iteration",{at:c,type:t}),this.debounce(s,i,t,()=>{this.withinOwners(l,g=>{m.putPrivate(s,jt,!0),m.isTextualInput(s)||this.setActiveElement(s),Q.exec("change",o,g,s,["push",{_target:i.target.name,dispatcher:l}])})}))},!1)}debounce(e,t,i,n){if(i==="blur"||i==="focusout")return n();let s=this.binding(wi),r=this.binding(ki),a=this.defaults.debounce.toString(),o=this.defaults.throttle.toString();this.withinOwners(e,l=>{let c=()=>!l.isDestroyed()&&document.body.contains(e);m.debounce(e,t,s,a,r,o,c,()=>{n()})})}silenceEvents(e){this.silenced=!0,e(),this.silenced=!1}on(e,t){window.addEventListener(e,i=>{this.silenced||t(i)})}},tn=class{constructor(){this.transitions=new Set,this.pendingOps=[],this.reset()}reset(){this.transitions.forEach(e=>{cancelTimeout(e),this.transitions.delete(e)}),this.flushPendingOps()}after(e){this.size()===0?e():this.pushPendingOp(e)}addTransition(e,t,i){t();let n=setTimeout(()=>{this.transitions.delete(n),i(),this.size()===0&&this.flushPendingOps()},e);this.transitions.add(n)}pushPendingOp(e){this.pendingOps.push(e)}size(){return this.transitions.size}flushPendingOps(){this.pendingOps.forEach(e=>e()),this.pendingOps=[]}};var Be=si(Wt());window.toggleNode=e=>{e.parentNode.querySelector(".menu-list").classList.toggle("is-hidden");let t=e.querySelector("span.icon > i");t.classList.toggle("fa-folder-open"),t.classList.toggle("fa-folder")};var pe={};pe.EventLog={updated(){let e=this.el.parentNode;e.scrollTop=e.scrollHeight}};window.handleEnableLatencySimClick=function(e){let t=document.getElementById("playground-iframe").contentWindow.liveSocket,i=document.getElementById("debug_profile_latency_sim_value");if(e.checked){i.disabled=!1;let n=i.value||100;i.value=n,t.enableLatencySim(n)}else t.disableLatencySim(),i.disabled=!0;Xt()};window.handleEnableDebugClick=function(e){let t=document.getElementById("playground-iframe").contentWindow.liveSocket;e.checked?t.enableDebug():t.disableDebug()};window.handleEnableProfileClick=function(e){let t=document.getElementById("playground-iframe").contentWindow.liveSocket;e.checked?t.enableProfiling():t.disableProfiling()};window.handleLatencySimValueBlur=function(e){let t=document.getElementById("playground-iframe").contentWindow.liveSocket,i=t.getLatencySim();if(e.value!=i){let n=e.value||1e3;e.value=n,t.enableLatencySim(n)}};function sn(e){let t=document.getElementById("playground-tools-debug-profile"),i=document.getElementById("playground-tools-debug-profile-disabled");if(!e){t.hidden=!0,i.hidden=!1;return}t.hidden=!1,i.hidden=!0;let n=document.getElementById("debug_profile_enable_debug");n.checked=e.isDebugEnabled();let s=document.getElementById("debug_profile_enable_profile");s.checked=e.isProfileEnabled();let r=document.getElementById("debug_profile_enable_latency_sim"),a=document.getElementById("debug_profile_latency_sim_value"),o=e.getLatencySim();o&&(r.checked=!0,a.value=o),Xt()}function Xt(){let e=document.getElementById("playground-iframe").contentWindow.liveSocket,t=document.getElementById("playground-tab-label");e.getLatencySim()?t.innerHTML='Playground <span class="is-size-6" title="Latency simulator is enabled">\u26A0\uFE0F</span>':t.innerText="Playground"}function qt(e){if(!e){console.log("[Catalogue] window.liveSocket has not been set. Debug/Profile tab will be disabled.");return}if(e.patched)return;let t=e.currentLocation.pathname,i=`phx:live-socket:debug:${t}`,n=`phx:live-socket:profiling:${t}`,s=`phx:live-socket:latency-sim:${t}`;e.enableLatencySim=function(r){console.log(`latency simulator enabled as ${r}ms for the duration of this browser session.`),sessionStorage.setItem(s,r)},e.disableLatencySim=function(){sessionStorage.removeItem(s)},e.getLatencySim=function(){let r=sessionStorage.getItem(s);return r?parseInt(r):null},e.isDebugEnabled=function(){return sessionStorage.getItem(i)==="true"},e.enableDebug=function(){sessionStorage.setItem(i,"true")},e.disableDebug=function(){sessionStorage.removeItem(i)},e.isProfileEnabled=function(){return sessionStorage.getItem(n)==="true"},e.enableProfiling=function(){sessionStorage.setItem(n,"true")},e.disableProfiling=function(){sessionStorage.removeItem(n)},e.patched=!0}var rn=(e,t,i,n)=>{window.liveSocket.isDebugEnabled()?console.log(`${e.id} ${t}: ${i} - `,n):e.id=="playground"&&(qt(e.liveSocket),e.liveSocket.isDebugEnabled()&&console.log(`${e.id} ${t}: ${i} - `,n))};pe.IframeBody={mounted(){let e=this.el;e.addEventListener("load",i=>{if(e.id=="playground-iframe"){let n=e.contentWindow.liveSocket;qt(n),sn(n)}});let t;e.contentWindow.addEventListener("resize",i=>{if(e.id=="playground-iframe"){e.offsetWidth>e.parentElement.offsetWidth&&(e.style.width="100%");let n=this;clearTimeout(t),t=setTimeout(function(){n.pushEvent("playground_resize",{height:e.style.height,width:e.style.width})},300)}})}};pe.Highlight={mounted(){Be.default.highlightElement(this.el),Be.default.highlightElement(this.el)},updated(){Be.default.highlightElement(this.el)}};pe.Mermaid={mounted(){mermaid.init(void 0,`#${this.el.id}`)}};pe.SectionHeading={mounted(){let e=document.createElement("div");e.innerHTML=`<a href="#${this.el.id}" class="hover-link">
      <span class="icon-link" aria-hidden="true">
        <svg viewBox="0 0 16 16" version="1.1" width="20" height="20" aria-hidden="true"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg>
      </span>
    </a>`,this.el.insertBefore(e.firstChild,this.el.firstChild)}};var an=document.querySelector("meta[name='csrf-token']").getAttribute("content"),Kt=new Vt("/live",mt,{params:{_csrf_token:an},hooks:pe,viewLogger:rn});Kt.connect();window.liveSocket=Kt;})();
//# sourceMappingURL=data:application/json;base64,
